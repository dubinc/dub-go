// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// NotFoundCode - A short code indicating the error code returned.
type NotFoundCode string

const (
	NotFoundCodeNotFound NotFoundCode = "not_found"
)

func (e NotFoundCode) ToPointer() *NotFoundCode {
	return &e
}
func (e *NotFoundCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "not_found":
		*e = NotFoundCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotFoundCode: %v", v)
	}
}

type NotFoundError struct {
	// A short code indicating the error code returned.
	Code NotFoundCode `json:"code"`
	// A human readable explanation of what went wrong.
	Message string `json:"message"`
	// A link to our documentation with more details about this error code
	DocURL *string `json:"doc_url,omitempty"`
}

func (n *NotFoundError) GetCode() NotFoundCode {
	if n == nil {
		return NotFoundCode("")
	}
	return n.Code
}

func (n *NotFoundError) GetMessage() string {
	if n == nil {
		return ""
	}
	return n.Message
}

func (n *NotFoundError) GetDocURL() *string {
	if n == nil {
		return nil
	}
	return n.DocURL
}

// NotFound - The server cannot find the requested resource.
type NotFound struct {
	Error_ NotFoundError `json:"error"`
}

var _ error = &NotFound{}

func (e *NotFound) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
