// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

// ListPartnersQueryParamStatus - A filter on the list based on the partner's `status` field.
type ListPartnersQueryParamStatus string

const (
	ListPartnersQueryParamStatusPending  ListPartnersQueryParamStatus = "pending"
	ListPartnersQueryParamStatusApproved ListPartnersQueryParamStatus = "approved"
	ListPartnersQueryParamStatusRejected ListPartnersQueryParamStatus = "rejected"
	ListPartnersQueryParamStatusInvited  ListPartnersQueryParamStatus = "invited"
	ListPartnersQueryParamStatusDeclined ListPartnersQueryParamStatus = "declined"
	ListPartnersQueryParamStatusBanned   ListPartnersQueryParamStatus = "banned"
	ListPartnersQueryParamStatusArchived ListPartnersQueryParamStatus = "archived"
)

func (e ListPartnersQueryParamStatus) ToPointer() *ListPartnersQueryParamStatus {
	return &e
}
func (e *ListPartnersQueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "invited":
		fallthrough
	case "declined":
		fallthrough
	case "banned":
		fallthrough
	case "archived":
		*e = ListPartnersQueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPartnersQueryParamStatus: %v", v)
	}
}

// ListPartnersQueryParamSortBy - The field to sort the partners by. The default is `saleAmount`.
type ListPartnersQueryParamSortBy string

const (
	ListPartnersQueryParamSortByCreatedAt   ListPartnersQueryParamSortBy = "createdAt"
	ListPartnersQueryParamSortByClicks      ListPartnersQueryParamSortBy = "clicks"
	ListPartnersQueryParamSortByLeads       ListPartnersQueryParamSortBy = "leads"
	ListPartnersQueryParamSortBySales       ListPartnersQueryParamSortBy = "sales"
	ListPartnersQueryParamSortBySaleAmount  ListPartnersQueryParamSortBy = "saleAmount"
	ListPartnersQueryParamSortByCommissions ListPartnersQueryParamSortBy = "commissions"
	ListPartnersQueryParamSortByNetRevenue  ListPartnersQueryParamSortBy = "netRevenue"
)

func (e ListPartnersQueryParamSortBy) ToPointer() *ListPartnersQueryParamSortBy {
	return &e
}
func (e *ListPartnersQueryParamSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		fallthrough
	case "clicks":
		fallthrough
	case "leads":
		fallthrough
	case "sales":
		fallthrough
	case "saleAmount":
		fallthrough
	case "commissions":
		fallthrough
	case "netRevenue":
		*e = ListPartnersQueryParamSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPartnersQueryParamSortBy: %v", v)
	}
}

// ListPartnersQueryParamSortOrder - The sort order. The default is `desc`.
type ListPartnersQueryParamSortOrder string

const (
	ListPartnersQueryParamSortOrderAsc  ListPartnersQueryParamSortOrder = "asc"
	ListPartnersQueryParamSortOrderDesc ListPartnersQueryParamSortOrder = "desc"
)

func (e ListPartnersQueryParamSortOrder) ToPointer() *ListPartnersQueryParamSortOrder {
	return &e
}
func (e *ListPartnersQueryParamSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListPartnersQueryParamSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPartnersQueryParamSortOrder: %v", v)
	}
}

type ListPartnersRequest struct {
	// A filter on the list based on the partner's `status` field.
	Status *ListPartnersQueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// A filter on the list based on the partner's `country` field.
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// The field to sort the partners by. The default is `saleAmount`.
	SortBy *ListPartnersQueryParamSortBy `default:"saleAmount" queryParam:"style=form,explode=true,name=sortBy"`
	// The sort order. The default is `desc`.
	SortOrder *ListPartnersQueryParamSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// A case-sensitive filter on the list based on the partner's `tenantId` field. The value must be a string. Takes precedence over `search`.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// Whether to include stats fields on the partner (`clicks`, `leads`, `sales`, `saleAmount`, `commissions`, `netRevenue`). If false, those fields will be returned as 0.
	IncludeExpandedFields *bool `queryParam:"style=form,explode=true,name=includeExpandedFields"`
	// A search query to filter partners by name, email, or tenantId.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (l ListPartnersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPartnersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPartnersRequest) GetStatus() *ListPartnersQueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListPartnersRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *ListPartnersRequest) GetSortBy() *ListPartnersQueryParamSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *ListPartnersRequest) GetSortOrder() *ListPartnersQueryParamSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListPartnersRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListPartnersRequest) GetIncludeExpandedFields() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeExpandedFields
}

func (o *ListPartnersRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *ListPartnersRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListPartnersRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

// ListPartnersStatus - The status of the partner's enrollment in the program.
type ListPartnersStatus string

const (
	ListPartnersStatusPending  ListPartnersStatus = "pending"
	ListPartnersStatusApproved ListPartnersStatus = "approved"
	ListPartnersStatusRejected ListPartnersStatus = "rejected"
	ListPartnersStatusInvited  ListPartnersStatus = "invited"
	ListPartnersStatusDeclined ListPartnersStatus = "declined"
	ListPartnersStatusBanned   ListPartnersStatus = "banned"
	ListPartnersStatusArchived ListPartnersStatus = "archived"
)

func (e ListPartnersStatus) ToPointer() *ListPartnersStatus {
	return &e
}
func (e *ListPartnersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "invited":
		fallthrough
	case "declined":
		fallthrough
	case "banned":
		fallthrough
	case "archived":
		*e = ListPartnersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPartnersStatus: %v", v)
	}
}

type ListPartnersLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short links has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of sales the short links has generated.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar amount of sales the short links has generated (in cents).
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (l ListPartnersLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPartnersLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPartnersLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPartnersLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *ListPartnersLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListPartnersLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *ListPartnersLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ListPartnersLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *ListPartnersLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *ListPartnersLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *ListPartnersLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

// ListPartnersBannedReason - If the partner was banned from the program, this is the reason for the ban.
type ListPartnersBannedReason string

const (
	ListPartnersBannedReasonTosViolation         ListPartnersBannedReason = "tos_violation"
	ListPartnersBannedReasonInappropriateContent ListPartnersBannedReason = "inappropriate_content"
	ListPartnersBannedReasonFakeTraffic          ListPartnersBannedReason = "fake_traffic"
	ListPartnersBannedReasonFraud                ListPartnersBannedReason = "fraud"
	ListPartnersBannedReasonSpam                 ListPartnersBannedReason = "spam"
	ListPartnersBannedReasonBrandAbuse           ListPartnersBannedReason = "brand_abuse"
)

func (e ListPartnersBannedReason) ToPointer() *ListPartnersBannedReason {
	return &e
}
func (e *ListPartnersBannedReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tos_violation":
		fallthrough
	case "inappropriate_content":
		fallthrough
	case "fake_traffic":
		fallthrough
	case "fraud":
		fallthrough
	case "spam":
		fallthrough
	case "brand_abuse":
		*e = ListPartnersBannedReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPartnersBannedReason: %v", v)
	}
}

type ListPartnersResponseBody struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
	// A brief description of the partner and their background.
	Description *string `json:"description,omitempty"`
	// The partner's country (required for tax purposes).
	Country *string `json:"country"`
	// The partner's PayPal email (for receiving payouts via PayPal).
	PaypalEmail *string `json:"paypalEmail"`
	// The partner's Stripe Connect ID (for receiving payouts via Stripe).
	StripeConnectID *string `json:"stripeConnectId"`
	// The date when the partner enabled payouts.
	PayoutsEnabledAt *string `json:"payoutsEnabledAt"`
	// The partner's unique ID on Dub.
	PartnerID string `json:"partnerId"`
	// The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
	TenantID *string `json:"tenantId"`
	// The program's unique ID on Dub.
	ProgramID string `json:"programId"`
	CreatedAt string `json:"createdAt"`
	// The status of the partner's enrollment in the program.
	Status ListPartnersStatus `json:"status"`
	// The partner's referral links in this program.
	Links []ListPartnersLink `json:"links"`
	// The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
	TotalCommissions *float64 `default:"0" json:"totalCommissions"`
	ClickRewardID    *string  `json:"clickRewardId,omitempty"`
	LeadRewardID     *string  `json:"leadRewardId,omitempty"`
	SaleRewardID     *string  `json:"saleRewardId,omitempty"`
	DiscountID       *string  `json:"discountId,omitempty"`
	// If the partner submitted an application to join the program, this is the ID of the application.
	ApplicationID *string `json:"applicationId,omitempty"`
	// If the partner was banned from the program, this is the date of the ban.
	BannedAt *string `json:"bannedAt,omitempty"`
	// If the partner was banned from the program, this is the reason for the ban.
	BannedReason *ListPartnersBannedReason `json:"bannedReason,omitempty"`
	// The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	Clicks *float64 `default:"0" json:"clicks"`
	// The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	Leads *float64 `default:"0" json:"leads"`
	// The total number of sales generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	Sales *float64 `default:"0" json:"sales"`
	// The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	SaleAmount *float64 `default:"0" json:"saleAmount"`
	// The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
	NetRevenue *float64 `default:"0" json:"netRevenue"`
	// The partner's website URL (including the https protocol).
	Website           *string `json:"website,omitempty"`
	WebsiteTxtRecord  *string `json:"websiteTxtRecord,omitempty"`
	WebsiteVerifiedAt *string `json:"websiteVerifiedAt,omitempty"`
	// The partner's YouTube channel username (e.g. `johndoe`).
	Youtube                *string  `json:"youtube,omitempty"`
	YoutubeVerifiedAt      *string  `json:"youtubeVerifiedAt,omitempty"`
	YoutubeSubscriberCount *float64 `json:"youtubeSubscriberCount,omitempty"`
	YoutubeViewCount       *float64 `json:"youtubeViewCount,omitempty"`
	// The partner's Twitter username (e.g. `johndoe`).
	Twitter           *string `json:"twitter,omitempty"`
	TwitterVerifiedAt *string `json:"twitterVerifiedAt,omitempty"`
	// The partner's LinkedIn username (e.g. `johndoe`).
	Linkedin           *string `json:"linkedin,omitempty"`
	LinkedinVerifiedAt *string `json:"linkedinVerifiedAt,omitempty"`
	// The partner's Instagram username (e.g. `johndoe`).
	Instagram           *string `json:"instagram,omitempty"`
	InstagramVerifiedAt *string `json:"instagramVerifiedAt,omitempty"`
	// The partner's TikTok username (e.g. `johndoe`).
	Tiktok           *string `json:"tiktok,omitempty"`
	TiktokVerifiedAt *string `json:"tiktokVerifiedAt,omitempty"`
}

func (l ListPartnersResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPartnersResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListPartnersResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPartnersResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListPartnersResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListPartnersResponseBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *ListPartnersResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListPartnersResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *ListPartnersResponseBody) GetPaypalEmail() *string {
	if o == nil {
		return nil
	}
	return o.PaypalEmail
}

func (o *ListPartnersResponseBody) GetStripeConnectID() *string {
	if o == nil {
		return nil
	}
	return o.StripeConnectID
}

func (o *ListPartnersResponseBody) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *ListPartnersResponseBody) GetPartnerID() string {
	if o == nil {
		return ""
	}
	return o.PartnerID
}

func (o *ListPartnersResponseBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListPartnersResponseBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *ListPartnersResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListPartnersResponseBody) GetStatus() ListPartnersStatus {
	if o == nil {
		return ListPartnersStatus("")
	}
	return o.Status
}

func (o *ListPartnersResponseBody) GetLinks() []ListPartnersLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *ListPartnersResponseBody) GetTotalCommissions() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalCommissions
}

func (o *ListPartnersResponseBody) GetClickRewardID() *string {
	if o == nil {
		return nil
	}
	return o.ClickRewardID
}

func (o *ListPartnersResponseBody) GetLeadRewardID() *string {
	if o == nil {
		return nil
	}
	return o.LeadRewardID
}

func (o *ListPartnersResponseBody) GetSaleRewardID() *string {
	if o == nil {
		return nil
	}
	return o.SaleRewardID
}

func (o *ListPartnersResponseBody) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *ListPartnersResponseBody) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *ListPartnersResponseBody) GetBannedAt() *string {
	if o == nil {
		return nil
	}
	return o.BannedAt
}

func (o *ListPartnersResponseBody) GetBannedReason() *ListPartnersBannedReason {
	if o == nil {
		return nil
	}
	return o.BannedReason
}

func (o *ListPartnersResponseBody) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *ListPartnersResponseBody) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *ListPartnersResponseBody) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *ListPartnersResponseBody) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *ListPartnersResponseBody) GetNetRevenue() *float64 {
	if o == nil {
		return nil
	}
	return o.NetRevenue
}

func (o *ListPartnersResponseBody) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *ListPartnersResponseBody) GetWebsiteTxtRecord() *string {
	if o == nil {
		return nil
	}
	return o.WebsiteTxtRecord
}

func (o *ListPartnersResponseBody) GetWebsiteVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.WebsiteVerifiedAt
}

func (o *ListPartnersResponseBody) GetYoutube() *string {
	if o == nil {
		return nil
	}
	return o.Youtube
}

func (o *ListPartnersResponseBody) GetYoutubeVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.YoutubeVerifiedAt
}

func (o *ListPartnersResponseBody) GetYoutubeSubscriberCount() *float64 {
	if o == nil {
		return nil
	}
	return o.YoutubeSubscriberCount
}

func (o *ListPartnersResponseBody) GetYoutubeViewCount() *float64 {
	if o == nil {
		return nil
	}
	return o.YoutubeViewCount
}

func (o *ListPartnersResponseBody) GetTwitter() *string {
	if o == nil {
		return nil
	}
	return o.Twitter
}

func (o *ListPartnersResponseBody) GetTwitterVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.TwitterVerifiedAt
}

func (o *ListPartnersResponseBody) GetLinkedin() *string {
	if o == nil {
		return nil
	}
	return o.Linkedin
}

func (o *ListPartnersResponseBody) GetLinkedinVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.LinkedinVerifiedAt
}

func (o *ListPartnersResponseBody) GetInstagram() *string {
	if o == nil {
		return nil
	}
	return o.Instagram
}

func (o *ListPartnersResponseBody) GetInstagramVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.InstagramVerifiedAt
}

func (o *ListPartnersResponseBody) GetTiktok() *string {
	if o == nil {
		return nil
	}
	return o.Tiktok
}

func (o *ListPartnersResponseBody) GetTiktokVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.TiktokVerifiedAt
}
