// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

// Status - Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
type Status string

const (
	StatusRefunded  Status = "refunded"
	StatusDuplicate Status = "duplicate"
	StatusCanceled  Status = "canceled"
	StatusFraud     Status = "fraud"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "canceled":
		fallthrough
	case "fraud":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type UpdateCommissionRequestBody struct {
	// The new absolute amount for the sale. Paid commissions cannot be updated.
	Amount *float64 `json:"amount,omitempty"`
	// Modify the current sale amount: use positive values to increase the amount, negative values to decrease it. Takes precedence over `amount`. Paid commissions cannot be updated.
	ModifyAmount *float64 `json:"modifyAmount,omitempty"`
	// The currency of the sale amount to update. Accepts ISO 4217 currency codes.
	Currency *string `default:"usd" json:"currency"`
	// Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
	Status *Status `json:"status,omitempty"`
}

func (u UpdateCommissionRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateCommissionRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCommissionRequestBody) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdateCommissionRequestBody) GetModifyAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ModifyAmount
}

func (o *UpdateCommissionRequestBody) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *UpdateCommissionRequestBody) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateCommissionRequest struct {
	// The commission's unique ID on Dub.
	ID          string                       `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateCommissionRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateCommissionRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCommissionRequest) GetRequestBody() *UpdateCommissionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateCommissionType string

const (
	UpdateCommissionTypeClick  UpdateCommissionType = "click"
	UpdateCommissionTypeLead   UpdateCommissionType = "lead"
	UpdateCommissionTypeSale   UpdateCommissionType = "sale"
	UpdateCommissionTypeCustom UpdateCommissionType = "custom"
)

func (e UpdateCommissionType) ToPointer() *UpdateCommissionType {
	return &e
}
func (e *UpdateCommissionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = UpdateCommissionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommissionType: %v", v)
	}
}

type UpdateCommissionStatus string

const (
	UpdateCommissionStatusPending   UpdateCommissionStatus = "pending"
	UpdateCommissionStatusProcessed UpdateCommissionStatus = "processed"
	UpdateCommissionStatusPaid      UpdateCommissionStatus = "paid"
	UpdateCommissionStatusRefunded  UpdateCommissionStatus = "refunded"
	UpdateCommissionStatusDuplicate UpdateCommissionStatus = "duplicate"
	UpdateCommissionStatusFraud     UpdateCommissionStatus = "fraud"
	UpdateCommissionStatusCanceled  UpdateCommissionStatus = "canceled"
)

func (e UpdateCommissionStatus) ToPointer() *UpdateCommissionStatus {
	return &e
}
func (e *UpdateCommissionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = UpdateCommissionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommissionStatus: %v", v)
	}
}

// UpdateCommissionResponseBody - The updated commission.
type UpdateCommissionResponseBody struct {
	// The commission's unique ID on Dub.
	ID        string                 `json:"id"`
	Type      *UpdateCommissionType  `json:"type,omitempty"`
	Amount    float64                `json:"amount"`
	Earnings  float64                `json:"earnings"`
	Currency  string                 `json:"currency"`
	Status    UpdateCommissionStatus `json:"status"`
	InvoiceID *string                `json:"invoiceId,omitempty"`
	CreatedAt string                 `json:"createdAt"`
	UpdatedAt string                 `json:"updatedAt"`
}

func (o *UpdateCommissionResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCommissionResponseBody) GetType() *UpdateCommissionType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateCommissionResponseBody) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *UpdateCommissionResponseBody) GetEarnings() float64 {
	if o == nil {
		return 0.0
	}
	return o.Earnings
}

func (o *UpdateCommissionResponseBody) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateCommissionResponseBody) GetStatus() UpdateCommissionStatus {
	if o == nil {
		return UpdateCommissionStatus("")
	}
	return o.Status
}

func (o *UpdateCommissionResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *UpdateCommissionResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateCommissionResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}
