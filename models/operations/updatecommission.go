// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

// Status - Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
type Status string

const (
	StatusRefunded  Status = "refunded"
	StatusDuplicate Status = "duplicate"
	StatusCanceled  Status = "canceled"
	StatusFraud     Status = "fraud"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "canceled":
		fallthrough
	case "fraud":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type UpdateCommissionRequestBody struct {
	// The new absolute amount for the sale. Paid commissions cannot be updated.
	Amount *float64 `json:"amount,omitempty"`
	// Modify the current sale amount: use positive values to increase the amount, negative values to decrease it. Takes precedence over `amount`. Paid commissions cannot be updated.
	ModifyAmount *float64 `json:"modifyAmount,omitempty"`
	// The currency of the sale amount to update. Accepts ISO 4217 currency codes.
	Currency *string `default:"usd" json:"currency"`
	// Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
	Status *Status `json:"status,omitempty"`
}

func (u UpdateCommissionRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateCommissionRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *UpdateCommissionRequestBody) GetAmount() *float64 {
	if u == nil {
		return nil
	}
	return u.Amount
}

func (u *UpdateCommissionRequestBody) GetModifyAmount() *float64 {
	if u == nil {
		return nil
	}
	return u.ModifyAmount
}

func (u *UpdateCommissionRequestBody) GetCurrency() *string {
	if u == nil {
		return nil
	}
	return u.Currency
}

func (u *UpdateCommissionRequestBody) GetStatus() *Status {
	if u == nil {
		return nil
	}
	return u.Status
}

type UpdateCommissionRequest struct {
	// The commission's unique ID on Dub.
	ID          string                       `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateCommissionRequestBody `request:"mediaType=application/json"`
}

func (u *UpdateCommissionRequest) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateCommissionRequest) GetRequestBody() *UpdateCommissionRequestBody {
	if u == nil {
		return nil
	}
	return u.RequestBody
}

type UpdateCommissionType string

const (
	UpdateCommissionTypeClick  UpdateCommissionType = "click"
	UpdateCommissionTypeLead   UpdateCommissionType = "lead"
	UpdateCommissionTypeSale   UpdateCommissionType = "sale"
	UpdateCommissionTypeCustom UpdateCommissionType = "custom"
)

func (e UpdateCommissionType) ToPointer() *UpdateCommissionType {
	return &e
}
func (e *UpdateCommissionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = UpdateCommissionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommissionType: %v", v)
	}
}

type UpdateCommissionStatus string

const (
	UpdateCommissionStatusPending   UpdateCommissionStatus = "pending"
	UpdateCommissionStatusProcessed UpdateCommissionStatus = "processed"
	UpdateCommissionStatusPaid      UpdateCommissionStatus = "paid"
	UpdateCommissionStatusRefunded  UpdateCommissionStatus = "refunded"
	UpdateCommissionStatusDuplicate UpdateCommissionStatus = "duplicate"
	UpdateCommissionStatusFraud     UpdateCommissionStatus = "fraud"
	UpdateCommissionStatusCanceled  UpdateCommissionStatus = "canceled"
)

func (e UpdateCommissionStatus) ToPointer() *UpdateCommissionStatus {
	return &e
}
func (e *UpdateCommissionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = UpdateCommissionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCommissionStatus: %v", v)
	}
}

type UpdateCommissionPartner struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
	// The date when the partner enabled payouts.
	PayoutsEnabledAt *string `json:"payoutsEnabledAt"`
	// The partner's country (required for tax purposes).
	Country *string `json:"country"`
}

func (u *UpdateCommissionPartner) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateCommissionPartner) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateCommissionPartner) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateCommissionPartner) GetImage() *string {
	if u == nil {
		return nil
	}
	return u.Image
}

func (u *UpdateCommissionPartner) GetPayoutsEnabledAt() *string {
	if u == nil {
		return nil
	}
	return u.PayoutsEnabledAt
}

func (u *UpdateCommissionPartner) GetCountry() *string {
	if u == nil {
		return nil
	}
	return u.Country
}

type UpdateCommissionCustomer struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// Total number of sales for the customer.
	Sales *float64 `json:"sales,omitempty"`
	// Total amount of sales for the customer.
	SaleAmount *float64 `json:"saleAmount,omitempty"`
	// The date the customer was created.
	CreatedAt string `json:"createdAt"`
}

func (u *UpdateCommissionCustomer) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateCommissionCustomer) GetExternalID() string {
	if u == nil {
		return ""
	}
	return u.ExternalID
}

func (u *UpdateCommissionCustomer) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateCommissionCustomer) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateCommissionCustomer) GetAvatar() *string {
	if u == nil {
		return nil
	}
	return u.Avatar
}

func (u *UpdateCommissionCustomer) GetCountry() *string {
	if u == nil {
		return nil
	}
	return u.Country
}

func (u *UpdateCommissionCustomer) GetSales() *float64 {
	if u == nil {
		return nil
	}
	return u.Sales
}

func (u *UpdateCommissionCustomer) GetSaleAmount() *float64 {
	if u == nil {
		return nil
	}
	return u.SaleAmount
}

func (u *UpdateCommissionCustomer) GetCreatedAt() string {
	if u == nil {
		return ""
	}
	return u.CreatedAt
}

// UpdateCommissionResponseBody - The updated commission.
type UpdateCommissionResponseBody struct {
	// The commission's unique ID on Dub.
	ID          string                 `json:"id"`
	Type        *UpdateCommissionType  `json:"type,omitempty"`
	Amount      float64                `json:"amount"`
	Earnings    float64                `json:"earnings"`
	Currency    string                 `json:"currency"`
	Status      UpdateCommissionStatus `json:"status"`
	InvoiceID   *string                `json:"invoiceId"`
	Description *string                `json:"description"`
	Quantity    float64                `json:"quantity"`
	// The user who created the manual commission.
	UserID    *string                   `json:"userId,omitempty"`
	CreatedAt string                    `json:"createdAt"`
	UpdatedAt string                    `json:"updatedAt"`
	Partner   UpdateCommissionPartner   `json:"partner"`
	Customer  *UpdateCommissionCustomer `json:"customer,omitempty"`
}

func (u *UpdateCommissionResponseBody) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateCommissionResponseBody) GetType() *UpdateCommissionType {
	if u == nil {
		return nil
	}
	return u.Type
}

func (u *UpdateCommissionResponseBody) GetAmount() float64 {
	if u == nil {
		return 0.0
	}
	return u.Amount
}

func (u *UpdateCommissionResponseBody) GetEarnings() float64 {
	if u == nil {
		return 0.0
	}
	return u.Earnings
}

func (u *UpdateCommissionResponseBody) GetCurrency() string {
	if u == nil {
		return ""
	}
	return u.Currency
}

func (u *UpdateCommissionResponseBody) GetStatus() UpdateCommissionStatus {
	if u == nil {
		return UpdateCommissionStatus("")
	}
	return u.Status
}

func (u *UpdateCommissionResponseBody) GetInvoiceID() *string {
	if u == nil {
		return nil
	}
	return u.InvoiceID
}

func (u *UpdateCommissionResponseBody) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateCommissionResponseBody) GetQuantity() float64 {
	if u == nil {
		return 0.0
	}
	return u.Quantity
}

func (u *UpdateCommissionResponseBody) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

func (u *UpdateCommissionResponseBody) GetCreatedAt() string {
	if u == nil {
		return ""
	}
	return u.CreatedAt
}

func (u *UpdateCommissionResponseBody) GetUpdatedAt() string {
	if u == nil {
		return ""
	}
	return u.UpdatedAt
}

func (u *UpdateCommissionResponseBody) GetPartner() UpdateCommissionPartner {
	if u == nil {
		return UpdateCommissionPartner{}
	}
	return u.Partner
}

func (u *UpdateCommissionResponseBody) GetCustomer() *UpdateCommissionCustomer {
	if u == nil {
		return nil
	}
	return u.Customer
}
