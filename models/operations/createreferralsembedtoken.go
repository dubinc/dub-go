// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type CreateReferralsEmbedTokenTagIdsType string

const (
	CreateReferralsEmbedTokenTagIdsTypeStr        CreateReferralsEmbedTokenTagIdsType = "str"
	CreateReferralsEmbedTokenTagIdsTypeArrayOfStr CreateReferralsEmbedTokenTagIdsType = "arrayOfStr"
)

// CreateReferralsEmbedTokenTagIds - The unique IDs of the tags assigned to the short link.
type CreateReferralsEmbedTokenTagIds struct {
	Str        *string  `queryParam:"inline,name=tagIds"`
	ArrayOfStr []string `queryParam:"inline,name=tagIds"`

	Type CreateReferralsEmbedTokenTagIdsType
}

func CreateCreateReferralsEmbedTokenTagIdsStr(str string) CreateReferralsEmbedTokenTagIds {
	typ := CreateReferralsEmbedTokenTagIdsTypeStr

	return CreateReferralsEmbedTokenTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateReferralsEmbedTokenTagIdsArrayOfStr(arrayOfStr []string) CreateReferralsEmbedTokenTagIds {
	typ := CreateReferralsEmbedTokenTagIdsTypeArrayOfStr

	return CreateReferralsEmbedTokenTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateReferralsEmbedTokenTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateReferralsEmbedTokenTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateReferralsEmbedTokenTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateReferralsEmbedTokenTagIds", string(data))
}

func (u CreateReferralsEmbedTokenTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateReferralsEmbedTokenTagIds: all fields are null")
}

type CreateReferralsEmbedTokenTagNamesType string

const (
	CreateReferralsEmbedTokenTagNamesTypeStr        CreateReferralsEmbedTokenTagNamesType = "str"
	CreateReferralsEmbedTokenTagNamesTypeArrayOfStr CreateReferralsEmbedTokenTagNamesType = "arrayOfStr"
)

// CreateReferralsEmbedTokenTagNames - The unique name of the tags assigned to the short link (case insensitive).
type CreateReferralsEmbedTokenTagNames struct {
	Str        *string  `queryParam:"inline,name=tagNames"`
	ArrayOfStr []string `queryParam:"inline,name=tagNames"`

	Type CreateReferralsEmbedTokenTagNamesType
}

func CreateCreateReferralsEmbedTokenTagNamesStr(str string) CreateReferralsEmbedTokenTagNames {
	typ := CreateReferralsEmbedTokenTagNamesTypeStr

	return CreateReferralsEmbedTokenTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateReferralsEmbedTokenTagNamesArrayOfStr(arrayOfStr []string) CreateReferralsEmbedTokenTagNames {
	typ := CreateReferralsEmbedTokenTagNamesTypeArrayOfStr

	return CreateReferralsEmbedTokenTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateReferralsEmbedTokenTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateReferralsEmbedTokenTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateReferralsEmbedTokenTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateReferralsEmbedTokenTagNames", string(data))
}

func (u CreateReferralsEmbedTokenTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateReferralsEmbedTokenTagNames: all fields are null")
}

type CreateReferralsEmbedTokenTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (c *CreateReferralsEmbedTokenTestVariants) GetURL() string {
	if c == nil {
		return ""
	}
	return c.URL
}

func (c *CreateReferralsEmbedTokenTestVariants) GetPercentage() float64 {
	if c == nil {
		return 0.0
	}
	return c.Percentage
}

// CreateReferralsEmbedTokenLinkProps - Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
type CreateReferralsEmbedTokenLinkProps struct {
	// The length of the short link slug. Defaults to 7 if not provided. When used with `prefix`, the total length of the key will be `prefix.length + keyLength`.
	KeyLength *float64 `json:"keyLength,omitempty"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *CreateReferralsEmbedTokenTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *CreateReferralsEmbedTokenTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Link Previews feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []CreateReferralsEmbedTokenTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (c *CreateReferralsEmbedTokenLinkProps) GetKeyLength() *float64 {
	if c == nil {
		return nil
	}
	return c.KeyLength
}

func (c *CreateReferralsEmbedTokenLinkProps) GetExternalID() *string {
	if c == nil {
		return nil
	}
	return c.ExternalID
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTenantID() *string {
	if c == nil {
		return nil
	}
	return c.TenantID
}

func (c *CreateReferralsEmbedTokenLinkProps) GetPrefix() *string {
	if c == nil {
		return nil
	}
	return c.Prefix
}

func (c *CreateReferralsEmbedTokenLinkProps) GetArchived() *bool {
	if c == nil {
		return nil
	}
	return c.Archived
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTagIds() *CreateReferralsEmbedTokenTagIds {
	if c == nil {
		return nil
	}
	return c.TagIds
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTagNames() *CreateReferralsEmbedTokenTagNames {
	if c == nil {
		return nil
	}
	return c.TagNames
}

func (c *CreateReferralsEmbedTokenLinkProps) GetFolderID() *string {
	if c == nil {
		return nil
	}
	return c.FolderID
}

func (c *CreateReferralsEmbedTokenLinkProps) GetComments() *string {
	if c == nil {
		return nil
	}
	return c.Comments
}

func (c *CreateReferralsEmbedTokenLinkProps) GetExpiresAt() *string {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *CreateReferralsEmbedTokenLinkProps) GetExpiredURL() *string {
	if c == nil {
		return nil
	}
	return c.ExpiredURL
}

func (c *CreateReferralsEmbedTokenLinkProps) GetPassword() *string {
	if c == nil {
		return nil
	}
	return c.Password
}

func (c *CreateReferralsEmbedTokenLinkProps) GetProxy() *bool {
	if c == nil {
		return nil
	}
	return c.Proxy
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CreateReferralsEmbedTokenLinkProps) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateReferralsEmbedTokenLinkProps) GetImage() *string {
	if c == nil {
		return nil
	}
	return c.Image
}

func (c *CreateReferralsEmbedTokenLinkProps) GetVideo() *string {
	if c == nil {
		return nil
	}
	return c.Video
}

func (c *CreateReferralsEmbedTokenLinkProps) GetRewrite() *bool {
	if c == nil {
		return nil
	}
	return c.Rewrite
}

func (c *CreateReferralsEmbedTokenLinkProps) GetIos() *string {
	if c == nil {
		return nil
	}
	return c.Ios
}

func (c *CreateReferralsEmbedTokenLinkProps) GetAndroid() *string {
	if c == nil {
		return nil
	}
	return c.Android
}

func (c *CreateReferralsEmbedTokenLinkProps) GetDoIndex() *bool {
	if c == nil {
		return nil
	}
	return c.DoIndex
}

func (c *CreateReferralsEmbedTokenLinkProps) GetUtmSource() *string {
	if c == nil {
		return nil
	}
	return c.UtmSource
}

func (c *CreateReferralsEmbedTokenLinkProps) GetUtmMedium() *string {
	if c == nil {
		return nil
	}
	return c.UtmMedium
}

func (c *CreateReferralsEmbedTokenLinkProps) GetUtmCampaign() *string {
	if c == nil {
		return nil
	}
	return c.UtmCampaign
}

func (c *CreateReferralsEmbedTokenLinkProps) GetUtmTerm() *string {
	if c == nil {
		return nil
	}
	return c.UtmTerm
}

func (c *CreateReferralsEmbedTokenLinkProps) GetUtmContent() *string {
	if c == nil {
		return nil
	}
	return c.UtmContent
}

func (c *CreateReferralsEmbedTokenLinkProps) GetRef() *string {
	if c == nil {
		return nil
	}
	return c.Ref
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTestVariants() []CreateReferralsEmbedTokenTestVariants {
	if c == nil {
		return nil
	}
	return c.TestVariants
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTestStartedAt() *string {
	if c == nil {
		return nil
	}
	return c.TestStartedAt
}

func (c *CreateReferralsEmbedTokenLinkProps) GetTestCompletedAt() *string {
	if c == nil {
		return nil
	}
	return c.TestCompletedAt
}

type Partner struct {
	// The partner's full name. If undefined, the partner's email will be used in lieu of their name (e.g. `john@acme.com`)
	Name *string `json:"name,omitempty"`
	// The partner's email address. Partners will be able to claim their profile by signing up at `partners.dub.co` with this email.
	Email string `json:"email"`
	// The partner's unique username in your system (max 100 characters). This will be used to create a short link for the partner using your program's default domain. If not provided, Dub will try to generate a username from the partner's name or email.
	Username *string `json:"username,omitempty"`
	// The partner's avatar image. If not provided, a default avatar will be used.
	Image *string `json:"image,omitempty"`
	// The partner's unique ID in your system. Useful for retrieving the partner's links and stats later on. If not provided, the partner will be created as a standalone partner.
	TenantID *string `json:"tenantId,omitempty"`
	// The group ID to add the partner to. If not provided, the partner will be added to the default group.
	GroupID *string `json:"groupId,omitempty"`
	// The partner's country of residence. Must be passed as a 2-letter ISO 3166-1 country code. See https://d.to/geo for more information.
	Country *string `json:"country,omitempty"`
	// A brief description of the partner and their background. Max 5,000 characters.
	Description *string `json:"description,omitempty"`
	// Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
	LinkProps *CreateReferralsEmbedTokenLinkProps `json:"linkProps,omitempty"`
}

func (p *Partner) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *Partner) GetEmail() string {
	if p == nil {
		return ""
	}
	return p.Email
}

func (p *Partner) GetUsername() *string {
	if p == nil {
		return nil
	}
	return p.Username
}

func (p *Partner) GetImage() *string {
	if p == nil {
		return nil
	}
	return p.Image
}

func (p *Partner) GetTenantID() *string {
	if p == nil {
		return nil
	}
	return p.TenantID
}

func (p *Partner) GetGroupID() *string {
	if p == nil {
		return nil
	}
	return p.GroupID
}

func (p *Partner) GetCountry() *string {
	if p == nil {
		return nil
	}
	return p.Country
}

func (p *Partner) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *Partner) GetLinkProps() *CreateReferralsEmbedTokenLinkProps {
	if p == nil {
		return nil
	}
	return p.LinkProps
}

type CreateReferralsEmbedTokenRequestBody struct {
	PartnerID *string  `json:"partnerId,omitempty"`
	TenantID  *string  `json:"tenantId,omitempty"`
	Partner   *Partner `json:"partner,omitempty"`
}

func (c *CreateReferralsEmbedTokenRequestBody) GetPartnerID() *string {
	if c == nil {
		return nil
	}
	return c.PartnerID
}

func (c *CreateReferralsEmbedTokenRequestBody) GetTenantID() *string {
	if c == nil {
		return nil
	}
	return c.TenantID
}

func (c *CreateReferralsEmbedTokenRequestBody) GetPartner() *Partner {
	if c == nil {
		return nil
	}
	return c.Partner
}

// CreateReferralsEmbedTokenResponseBody - The created public embed token.
type CreateReferralsEmbedTokenResponseBody struct {
	PublicToken string `json:"publicToken"`
	Expires     string `json:"expires"`
}

func (c *CreateReferralsEmbedTokenResponseBody) GetPublicToken() string {
	if c == nil {
		return ""
	}
	return c.PublicToken
}

func (c *CreateReferralsEmbedTokenResponseBody) GetExpires() string {
	if c == nil {
		return ""
	}
	return c.Expires
}
