// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
	"github.com/dubinc/dub-go/models/components"
)

// QueryParamEvent - The type of event to retrieve analytics for. Defaults to 'clicks'.
type QueryParamEvent string

const (
	QueryParamEventClicks QueryParamEvent = "clicks"
	QueryParamEventLeads  QueryParamEvent = "leads"
	QueryParamEventSales  QueryParamEvent = "sales"
)

func (e QueryParamEvent) ToPointer() *QueryParamEvent {
	return &e
}
func (e *QueryParamEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clicks":
		fallthrough
	case "leads":
		fallthrough
	case "sales":
		*e = QueryParamEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamEvent: %v", v)
	}
}

// QueryParamInterval - The interval to retrieve analytics for. If undefined, defaults to 24h.
type QueryParamInterval string

const (
	QueryParamIntervalTwentyFourh QueryParamInterval = "24h"
	QueryParamIntervalSevend      QueryParamInterval = "7d"
	QueryParamIntervalThirtyd     QueryParamInterval = "30d"
	QueryParamIntervalNinetyd     QueryParamInterval = "90d"
	QueryParamIntervalOney        QueryParamInterval = "1y"
	QueryParamIntervalMtd         QueryParamInterval = "mtd"
	QueryParamIntervalQtd         QueryParamInterval = "qtd"
	QueryParamIntervalYtd         QueryParamInterval = "ytd"
	QueryParamIntervalAll         QueryParamInterval = "all"
)

func (e QueryParamInterval) ToPointer() *QueryParamInterval {
	return &e
}
func (e *QueryParamInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "1y":
		fallthrough
	case "mtd":
		fallthrough
	case "qtd":
		fallthrough
	case "ytd":
		fallthrough
	case "all":
		*e = QueryParamInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamInterval: %v", v)
	}
}

// QueryParamTrigger - The trigger to retrieve analytics for. If undefined, returns all trigger types.
type QueryParamTrigger string

const (
	QueryParamTriggerQr       QueryParamTrigger = "qr"
	QueryParamTriggerLink     QueryParamTrigger = "link"
	QueryParamTriggerPageview QueryParamTrigger = "pageview"
	QueryParamTriggerDeeplink QueryParamTrigger = "deeplink"
)

func (e QueryParamTrigger) ToPointer() *QueryParamTrigger {
	return &e
}
func (e *QueryParamTrigger) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "qr":
		fallthrough
	case "link":
		fallthrough
	case "pageview":
		fallthrough
	case "deeplink":
		*e = QueryParamTrigger(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamTrigger: %v", v)
	}
}

type ListEventsQueryParamTagIdsType string

const (
	ListEventsQueryParamTagIdsTypeStr        ListEventsQueryParamTagIdsType = "str"
	ListEventsQueryParamTagIdsTypeArrayOfStr ListEventsQueryParamTagIdsType = "arrayOfStr"
)

// ListEventsQueryParamTagIds - The tag IDs to retrieve analytics for.
type ListEventsQueryParamTagIds struct {
	Str        *string  `queryParam:"inline,name=tagIds"`
	ArrayOfStr []string `queryParam:"inline,name=tagIds"`

	Type ListEventsQueryParamTagIdsType
}

func CreateListEventsQueryParamTagIdsStr(str string) ListEventsQueryParamTagIds {
	typ := ListEventsQueryParamTagIdsTypeStr

	return ListEventsQueryParamTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateListEventsQueryParamTagIdsArrayOfStr(arrayOfStr []string) ListEventsQueryParamTagIds {
	typ := ListEventsQueryParamTagIdsTypeArrayOfStr

	return ListEventsQueryParamTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListEventsQueryParamTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListEventsQueryParamTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListEventsQueryParamTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListEventsQueryParamTagIds", string(data))
}

func (u ListEventsQueryParamTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListEventsQueryParamTagIds: all fields are null")
}

// QueryParamSaleType - Filter sales by type: 'new' for first-time purchases, 'recurring' for repeat purchases. If undefined, returns both.
type QueryParamSaleType string

const (
	QueryParamSaleTypeNew       QueryParamSaleType = "new"
	QueryParamSaleTypeRecurring QueryParamSaleType = "recurring"
)

func (e QueryParamSaleType) ToPointer() *QueryParamSaleType {
	return &e
}
func (e *QueryParamSaleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "recurring":
		*e = QueryParamSaleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSaleType: %v", v)
	}
}

// QueryParamSortOrder - The sort order. The default is `desc`.
type QueryParamSortOrder string

const (
	QueryParamSortOrderAsc  QueryParamSortOrder = "asc"
	QueryParamSortOrderDesc QueryParamSortOrder = "desc"
)

func (e QueryParamSortOrder) ToPointer() *QueryParamSortOrder {
	return &e
}
func (e *QueryParamSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = QueryParamSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortOrder: %v", v)
	}
}

// QueryParamSortBy - The field to sort the events by. The default is `timestamp`.
type QueryParamSortBy string

const (
	QueryParamSortByTimestamp QueryParamSortBy = "timestamp"
)

func (e QueryParamSortBy) ToPointer() *QueryParamSortBy {
	return &e
}
func (e *QueryParamSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "timestamp":
		*e = QueryParamSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortBy: %v", v)
	}
}

// Order - DEPRECATED. Use `sortOrder` instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Order string

const (
	OrderAsc  Order = "asc"
	OrderDesc Order = "desc"
)

func (e Order) ToPointer() *Order {
	return &e
}
func (e *Order) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = Order(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Order: %v", v)
	}
}

type ListEventsRequest struct {
	// The type of event to retrieve analytics for. Defaults to 'clicks'.
	Event *QueryParamEvent `default:"clicks" queryParam:"style=form,explode=true,name=event"`
	// The domain to filter analytics for.
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// The slug of the short link to retrieve analytics for. Must be used along with the corresponding `domain` of the short link to fetch analytics for a specific short link.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The unique ID of the short link on Dub to retrieve analytics for.
	LinkID *string `queryParam:"style=form,explode=true,name=linkId"`
	// The ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.
	ExternalID *string `queryParam:"style=form,explode=true,name=externalId"`
	// The ID of the tenant that created the link inside your system.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// The ID of the program to retrieve analytics for.
	ProgramID *string `queryParam:"style=form,explode=true,name=programId"`
	// The ID of the partner to retrieve analytics for.
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	// The ID of the customer to retrieve analytics for.
	CustomerID *string `queryParam:"style=form,explode=true,name=customerId"`
	// The interval to retrieve analytics for. If undefined, defaults to 24h.
	Interval *QueryParamInterval `queryParam:"style=form,explode=true,name=interval"`
	// The start date and time when to retrieve analytics from. If set, takes precedence over `interval`.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date and time when to retrieve analytics from. If not provided, defaults to the current date. If set along with `start`, takes precedence over `interval`.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
	Timezone *string `default:"UTC" queryParam:"style=form,explode=true,name=timezone"`
	// The country to retrieve analytics for. Must be passed as a 2-letter ISO 3166-1 country code. See https://d.to/geo for more information.
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// The city to retrieve analytics for.
	City *string `queryParam:"style=form,explode=true,name=city"`
	// The ISO 3166-2 region code to retrieve analytics for.
	Region *string `queryParam:"style=form,explode=true,name=region"`
	// The continent to retrieve analytics for.
	Continent *components.ContinentCode `queryParam:"style=form,explode=true,name=continent"`
	// The device to retrieve analytics for.
	Device *string `queryParam:"style=form,explode=true,name=device"`
	// The browser to retrieve analytics for.
	Browser *string `queryParam:"style=form,explode=true,name=browser"`
	// The OS to retrieve analytics for.
	Os *string `queryParam:"style=form,explode=true,name=os"`
	// The trigger to retrieve analytics for. If undefined, returns all trigger types.
	Trigger *QueryParamTrigger `queryParam:"style=form,explode=true,name=trigger"`
	// The referer to retrieve analytics for.
	Referer *string `queryParam:"style=form,explode=true,name=referer"`
	// The full referer URL to retrieve analytics for.
	RefererURL *string `queryParam:"style=form,explode=true,name=refererUrl"`
	// The URL to retrieve analytics for.
	URL *string `queryParam:"style=form,explode=true,name=url"`
	// The tag IDs to retrieve analytics for.
	TagIds *ListEventsQueryParamTagIds `queryParam:"style=form,explode=true,name=tagIds"`
	// The folder ID to retrieve analytics for. If not provided, return analytics for unsorted links.
	FolderID *string `queryParam:"style=form,explode=true,name=folderId"`
	// Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.
	Root *bool `queryParam:"style=form,explode=true,name=root"`
	// Filter sales by type: 'new' for first-time purchases, 'recurring' for repeat purchases. If undefined, returns both.
	SaleType *QueryParamSaleType `queryParam:"style=form,explode=true,name=saleType"`
	// Search the events by a custom metadata value. Only available for lead and sale events.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Deprecated: Use `tagIds` instead. The tag ID to retrieve analytics for.
	TagID *string `queryParam:"style=form,explode=true,name=tagId"`
	// Deprecated: Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.
	Qr *bool `queryParam:"style=form,explode=true,name=qr"`
	// The UTM source of the short link.
	UtmSource *string `queryParam:"style=form,explode=true,name=utm_source"`
	// The UTM medium of the short link.
	UtmMedium *string `queryParam:"style=form,explode=true,name=utm_medium"`
	// The UTM campaign of the short link.
	UtmCampaign *string `queryParam:"style=form,explode=true,name=utm_campaign"`
	// The UTM term of the short link.
	UtmTerm *string `queryParam:"style=form,explode=true,name=utm_term"`
	// The UTM content of the short link.
	UtmContent *string `queryParam:"style=form,explode=true,name=utm_content"`
	// The ref of the short link.
	Ref   *string  `queryParam:"style=form,explode=true,name=ref"`
	Page  *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	Limit *float64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// The sort order. The default is `desc`.
	SortOrder *QueryParamSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The field to sort the events by. The default is `timestamp`.
	SortBy *QueryParamSortBy `default:"timestamp" queryParam:"style=form,explode=true,name=sortBy"`
	// DEPRECATED. Use `sortOrder` instead.
	Order *Order `default:"desc" queryParam:"style=form,explode=true,name=order"`
}

func (l ListEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListEventsRequest) GetEvent() *QueryParamEvent {
	if l == nil {
		return nil
	}
	return l.Event
}

func (l *ListEventsRequest) GetDomain() *string {
	if l == nil {
		return nil
	}
	return l.Domain
}

func (l *ListEventsRequest) GetKey() *string {
	if l == nil {
		return nil
	}
	return l.Key
}

func (l *ListEventsRequest) GetLinkID() *string {
	if l == nil {
		return nil
	}
	return l.LinkID
}

func (l *ListEventsRequest) GetExternalID() *string {
	if l == nil {
		return nil
	}
	return l.ExternalID
}

func (l *ListEventsRequest) GetTenantID() *string {
	if l == nil {
		return nil
	}
	return l.TenantID
}

func (l *ListEventsRequest) GetProgramID() *string {
	if l == nil {
		return nil
	}
	return l.ProgramID
}

func (l *ListEventsRequest) GetPartnerID() *string {
	if l == nil {
		return nil
	}
	return l.PartnerID
}

func (l *ListEventsRequest) GetCustomerID() *string {
	if l == nil {
		return nil
	}
	return l.CustomerID
}

func (l *ListEventsRequest) GetInterval() *QueryParamInterval {
	if l == nil {
		return nil
	}
	return l.Interval
}

func (l *ListEventsRequest) GetStart() *string {
	if l == nil {
		return nil
	}
	return l.Start
}

func (l *ListEventsRequest) GetEnd() *string {
	if l == nil {
		return nil
	}
	return l.End
}

func (l *ListEventsRequest) GetTimezone() *string {
	if l == nil {
		return nil
	}
	return l.Timezone
}

func (l *ListEventsRequest) GetCountry() *string {
	if l == nil {
		return nil
	}
	return l.Country
}

func (l *ListEventsRequest) GetCity() *string {
	if l == nil {
		return nil
	}
	return l.City
}

func (l *ListEventsRequest) GetRegion() *string {
	if l == nil {
		return nil
	}
	return l.Region
}

func (l *ListEventsRequest) GetContinent() *components.ContinentCode {
	if l == nil {
		return nil
	}
	return l.Continent
}

func (l *ListEventsRequest) GetDevice() *string {
	if l == nil {
		return nil
	}
	return l.Device
}

func (l *ListEventsRequest) GetBrowser() *string {
	if l == nil {
		return nil
	}
	return l.Browser
}

func (l *ListEventsRequest) GetOs() *string {
	if l == nil {
		return nil
	}
	return l.Os
}

func (l *ListEventsRequest) GetTrigger() *QueryParamTrigger {
	if l == nil {
		return nil
	}
	return l.Trigger
}

func (l *ListEventsRequest) GetReferer() *string {
	if l == nil {
		return nil
	}
	return l.Referer
}

func (l *ListEventsRequest) GetRefererURL() *string {
	if l == nil {
		return nil
	}
	return l.RefererURL
}

func (l *ListEventsRequest) GetURL() *string {
	if l == nil {
		return nil
	}
	return l.URL
}

func (l *ListEventsRequest) GetTagIds() *ListEventsQueryParamTagIds {
	if l == nil {
		return nil
	}
	return l.TagIds
}

func (l *ListEventsRequest) GetFolderID() *string {
	if l == nil {
		return nil
	}
	return l.FolderID
}

func (l *ListEventsRequest) GetRoot() *bool {
	if l == nil {
		return nil
	}
	return l.Root
}

func (l *ListEventsRequest) GetSaleType() *QueryParamSaleType {
	if l == nil {
		return nil
	}
	return l.SaleType
}

func (l *ListEventsRequest) GetQuery() *string {
	if l == nil {
		return nil
	}
	return l.Query
}

func (l *ListEventsRequest) GetTagID() *string {
	if l == nil {
		return nil
	}
	return l.TagID
}

func (l *ListEventsRequest) GetQr() *bool {
	if l == nil {
		return nil
	}
	return l.Qr
}

func (l *ListEventsRequest) GetUtmSource() *string {
	if l == nil {
		return nil
	}
	return l.UtmSource
}

func (l *ListEventsRequest) GetUtmMedium() *string {
	if l == nil {
		return nil
	}
	return l.UtmMedium
}

func (l *ListEventsRequest) GetUtmCampaign() *string {
	if l == nil {
		return nil
	}
	return l.UtmCampaign
}

func (l *ListEventsRequest) GetUtmTerm() *string {
	if l == nil {
		return nil
	}
	return l.UtmTerm
}

func (l *ListEventsRequest) GetUtmContent() *string {
	if l == nil {
		return nil
	}
	return l.UtmContent
}

func (l *ListEventsRequest) GetRef() *string {
	if l == nil {
		return nil
	}
	return l.Ref
}

func (l *ListEventsRequest) GetPage() *float64 {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListEventsRequest) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListEventsRequest) GetSortOrder() *QueryParamSortOrder {
	if l == nil {
		return nil
	}
	return l.SortOrder
}

func (l *ListEventsRequest) GetSortBy() *QueryParamSortBy {
	if l == nil {
		return nil
	}
	return l.SortBy
}

func (l *ListEventsRequest) GetOrder() *Order {
	if l == nil {
		return nil
	}
	return l.Order
}

type ListEventsResponseBodyType string

const (
	ListEventsResponseBodyTypeClick ListEventsResponseBodyType = "click"
	ListEventsResponseBodyTypeLead  ListEventsResponseBodyType = "lead"
	ListEventsResponseBodyTypeSale  ListEventsResponseBodyType = "sale"
)

type ListEventsResponseBody struct {
	ClickEvent *components.ClickEvent `queryParam:"inline,name=responseBody"`
	LeadEvent  *components.LeadEvent  `queryParam:"inline,name=responseBody"`
	SaleEvent  *components.SaleEvent  `queryParam:"inline,name=responseBody"`

	Type ListEventsResponseBodyType
}

func CreateListEventsResponseBodyClick(click components.ClickEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeClick

	typStr := components.Event(typ)
	click.Event = typStr

	return ListEventsResponseBody{
		ClickEvent: &click,
		Type:       typ,
	}
}

func CreateListEventsResponseBodyLead(lead components.LeadEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeLead

	typStr := components.LeadEventEvent(typ)
	lead.Event = typStr

	return ListEventsResponseBody{
		LeadEvent: &lead,
		Type:      typ,
	}
}

func CreateListEventsResponseBodySale(sale components.SaleEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeSale

	typStr := components.SaleEventEvent(typ)
	sale.Event = typStr

	return ListEventsResponseBody{
		SaleEvent: &sale,
		Type:      typ,
	}
}

func (u *ListEventsResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Event string `json:"event"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Event {
	case "click":
		clickEvent := new(components.ClickEvent)
		if err := utils.UnmarshalJSON(data, &clickEvent, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == click) type components.ClickEvent within ListEventsResponseBody: %w", string(data), err)
		}

		u.ClickEvent = clickEvent
		u.Type = ListEventsResponseBodyTypeClick
		return nil
	case "lead":
		leadEvent := new(components.LeadEvent)
		if err := utils.UnmarshalJSON(data, &leadEvent, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == lead) type components.LeadEvent within ListEventsResponseBody: %w", string(data), err)
		}

		u.LeadEvent = leadEvent
		u.Type = ListEventsResponseBodyTypeLead
		return nil
	case "sale":
		saleEvent := new(components.SaleEvent)
		if err := utils.UnmarshalJSON(data, &saleEvent, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == sale) type components.SaleEvent within ListEventsResponseBody: %w", string(data), err)
		}

		u.SaleEvent = saleEvent
		u.Type = ListEventsResponseBodyTypeSale
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListEventsResponseBody", string(data))
}

func (u ListEventsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ClickEvent != nil {
		return utils.MarshalJSON(u.ClickEvent, "", true)
	}

	if u.LeadEvent != nil {
		return utils.MarshalJSON(u.LeadEvent, "", true)
	}

	if u.SaleEvent != nil {
		return utils.MarshalJSON(u.SaleEvent, "", true)
	}

	return nil, errors.New("could not marshal union type ListEventsResponseBody: all fields are null")
}
