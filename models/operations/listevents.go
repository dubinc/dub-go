// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
	"github.com/dubinc/dub-go/models/components"
)

// QueryParamEvent - The type of event to retrieve analytics for. Defaults to 'clicks'.
type QueryParamEvent string

const (
	QueryParamEventClicks QueryParamEvent = "clicks"
	QueryParamEventLeads  QueryParamEvent = "leads"
	QueryParamEventSales  QueryParamEvent = "sales"
)

func (e QueryParamEvent) ToPointer() *QueryParamEvent {
	return &e
}
func (e *QueryParamEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clicks":
		fallthrough
	case "leads":
		fallthrough
	case "sales":
		*e = QueryParamEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamEvent: %v", v)
	}
}

// QueryParamInterval - The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
type QueryParamInterval string

const (
	QueryParamIntervalTwentyFourh QueryParamInterval = "24h"
	QueryParamIntervalSevend      QueryParamInterval = "7d"
	QueryParamIntervalThirtyd     QueryParamInterval = "30d"
	QueryParamIntervalNinetyd     QueryParamInterval = "90d"
	QueryParamIntervalYtd         QueryParamInterval = "ytd"
	QueryParamIntervalOney        QueryParamInterval = "1y"
	QueryParamIntervalAll         QueryParamInterval = "all"
)

func (e QueryParamInterval) ToPointer() *QueryParamInterval {
	return &e
}
func (e *QueryParamInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "ytd":
		fallthrough
	case "1y":
		fallthrough
	case "all":
		*e = QueryParamInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamInterval: %v", v)
	}
}

// QueryParamTrigger - The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
type QueryParamTrigger string

const (
	QueryParamTriggerQr   QueryParamTrigger = "qr"
	QueryParamTriggerLink QueryParamTrigger = "link"
)

func (e QueryParamTrigger) ToPointer() *QueryParamTrigger {
	return &e
}
func (e *QueryParamTrigger) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "qr":
		fallthrough
	case "link":
		*e = QueryParamTrigger(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamTrigger: %v", v)
	}
}

type ListEventsQueryParamTagIdsType string

const (
	ListEventsQueryParamTagIdsTypeStr        ListEventsQueryParamTagIdsType = "str"
	ListEventsQueryParamTagIdsTypeArrayOfStr ListEventsQueryParamTagIdsType = "arrayOfStr"
)

// ListEventsQueryParamTagIds - The tag IDs to retrieve analytics for.
type ListEventsQueryParamTagIds struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ListEventsQueryParamTagIdsType
}

func CreateListEventsQueryParamTagIdsStr(str string) ListEventsQueryParamTagIds {
	typ := ListEventsQueryParamTagIdsTypeStr

	return ListEventsQueryParamTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateListEventsQueryParamTagIdsArrayOfStr(arrayOfStr []string) ListEventsQueryParamTagIds {
	typ := ListEventsQueryParamTagIdsTypeArrayOfStr

	return ListEventsQueryParamTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListEventsQueryParamTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ListEventsQueryParamTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListEventsQueryParamTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListEventsQueryParamTagIds", string(data))
}

func (u ListEventsQueryParamTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListEventsQueryParamTagIds: all fields are null")
}

// QueryParamSortOrder - The sort order. The default is `desc`.
type QueryParamSortOrder string

const (
	QueryParamSortOrderAsc  QueryParamSortOrder = "asc"
	QueryParamSortOrderDesc QueryParamSortOrder = "desc"
)

func (e QueryParamSortOrder) ToPointer() *QueryParamSortOrder {
	return &e
}
func (e *QueryParamSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = QueryParamSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortOrder: %v", v)
	}
}

// QueryParamSortBy - The field to sort the events by. The default is `timestamp`.
type QueryParamSortBy string

const (
	QueryParamSortByTimestamp QueryParamSortBy = "timestamp"
)

func (e QueryParamSortBy) ToPointer() *QueryParamSortBy {
	return &e
}
func (e *QueryParamSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "timestamp":
		*e = QueryParamSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortBy: %v", v)
	}
}

// Order - DEPRECATED. Use `sortOrder` instead.
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type Order string

const (
	OrderAsc  Order = "asc"
	OrderDesc Order = "desc"
)

func (e Order) ToPointer() *Order {
	return &e
}
func (e *Order) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = Order(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Order: %v", v)
	}
}

type ListEventsRequest struct {
	// The type of event to retrieve analytics for. Defaults to 'clicks'.
	Event *QueryParamEvent `default:"clicks" queryParam:"style=form,explode=true,name=event"`
	// The domain to filter analytics for.
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// The short link slug.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The unique ID of the short link on Dub.
	LinkID *string `queryParam:"style=form,explode=true,name=linkId"`
	// This is the ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.
	ExternalID *string `queryParam:"style=form,explode=true,name=externalId"`
	// The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
	Interval *QueryParamInterval `default:"24h" queryParam:"style=form,explode=true,name=interval"`
	// The start date and time when to retrieve analytics from. Takes precedence over `interval`.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date and time when to retrieve analytics from. If not provided, defaults to the current date. Takes precedence over `interval`.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
	Timezone *string `default:"UTC" queryParam:"style=form,explode=true,name=timezone"`
	// The country to retrieve analytics for.
	Country *components.CountryCode `queryParam:"style=form,explode=true,name=country"`
	// The city to retrieve analytics for.
	City *string `queryParam:"style=form,explode=true,name=city"`
	// The ISO 3166-2 region code to retrieve analytics for.
	Region *string `queryParam:"style=form,explode=true,name=region"`
	// The continent to retrieve analytics for.
	Continent *components.ContinentCode `queryParam:"style=form,explode=true,name=continent"`
	// The device to retrieve analytics for.
	Device *string `queryParam:"style=form,explode=true,name=device"`
	// The browser to retrieve analytics for.
	Browser *string `queryParam:"style=form,explode=true,name=browser"`
	// The OS to retrieve analytics for.
	Os *string `queryParam:"style=form,explode=true,name=os"`
	// The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
	Trigger *QueryParamTrigger `queryParam:"style=form,explode=true,name=trigger"`
	// The referer to retrieve analytics for.
	Referer *string `queryParam:"style=form,explode=true,name=referer"`
	// The full referer URL to retrieve analytics for.
	RefererURL *string `queryParam:"style=form,explode=true,name=refererUrl"`
	// The URL to retrieve analytics for.
	URL *string `queryParam:"style=form,explode=true,name=url"`
	// Deprecated. Use `tagIds` instead. The tag ID to retrieve analytics for.
	TagID *string `queryParam:"style=form,explode=true,name=tagId"`
	// The tag IDs to retrieve analytics for.
	TagIds *ListEventsQueryParamTagIds `queryParam:"style=form,explode=true,name=tagIds"`
	// Deprecated. Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.
	Qr *bool `queryParam:"style=form,explode=true,name=qr"`
	// Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.
	Root  *bool    `queryParam:"style=form,explode=true,name=root"`
	Page  *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	Limit *float64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// The sort order. The default is `desc`.
	SortOrder *QueryParamSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The field to sort the events by. The default is `timestamp`.
	SortBy *QueryParamSortBy `default:"timestamp" queryParam:"style=form,explode=true,name=sortBy"`
	// DEPRECATED. Use `sortOrder` instead.
	Order *Order `default:"desc" queryParam:"style=form,explode=true,name=order"`
}

func (l ListEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListEventsRequest) GetEvent() *QueryParamEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *ListEventsRequest) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *ListEventsRequest) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *ListEventsRequest) GetLinkID() *string {
	if o == nil {
		return nil
	}
	return o.LinkID
}

func (o *ListEventsRequest) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *ListEventsRequest) GetInterval() *QueryParamInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *ListEventsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListEventsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *ListEventsRequest) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *ListEventsRequest) GetCountry() *components.CountryCode {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *ListEventsRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListEventsRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListEventsRequest) GetContinent() *components.ContinentCode {
	if o == nil {
		return nil
	}
	return o.Continent
}

func (o *ListEventsRequest) GetDevice() *string {
	if o == nil {
		return nil
	}
	return o.Device
}

func (o *ListEventsRequest) GetBrowser() *string {
	if o == nil {
		return nil
	}
	return o.Browser
}

func (o *ListEventsRequest) GetOs() *string {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *ListEventsRequest) GetTrigger() *QueryParamTrigger {
	if o == nil {
		return nil
	}
	return o.Trigger
}

func (o *ListEventsRequest) GetReferer() *string {
	if o == nil {
		return nil
	}
	return o.Referer
}

func (o *ListEventsRequest) GetRefererURL() *string {
	if o == nil {
		return nil
	}
	return o.RefererURL
}

func (o *ListEventsRequest) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *ListEventsRequest) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *ListEventsRequest) GetTagIds() *ListEventsQueryParamTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *ListEventsRequest) GetQr() *bool {
	if o == nil {
		return nil
	}
	return o.Qr
}

func (o *ListEventsRequest) GetRoot() *bool {
	if o == nil {
		return nil
	}
	return o.Root
}

func (o *ListEventsRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListEventsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListEventsRequest) GetSortOrder() *QueryParamSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListEventsRequest) GetSortBy() *QueryParamSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *ListEventsRequest) GetOrder() *Order {
	if o == nil {
		return nil
	}
	return o.Order
}

type ListEventsResponseBodyType string

const (
	ListEventsResponseBodyTypeArrayOfClickEvent ListEventsResponseBodyType = "arrayOfClickEvent"
	ListEventsResponseBodyTypeArrayOfLeadEvent  ListEventsResponseBodyType = "arrayOfLeadEvent"
	ListEventsResponseBodyTypeArrayOfSaleEvent  ListEventsResponseBodyType = "arrayOfSaleEvent"
)

// ListEventsResponseBody - A list of events
type ListEventsResponseBody struct {
	ArrayOfClickEvent []components.ClickEvent `queryParam:"inline"`
	ArrayOfLeadEvent  []components.LeadEvent  `queryParam:"inline"`
	ArrayOfSaleEvent  []components.SaleEvent  `queryParam:"inline"`

	Type ListEventsResponseBodyType
}

func CreateListEventsResponseBodyArrayOfClickEvent(arrayOfClickEvent []components.ClickEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeArrayOfClickEvent

	return ListEventsResponseBody{
		ArrayOfClickEvent: arrayOfClickEvent,
		Type:              typ,
	}
}

func CreateListEventsResponseBodyArrayOfLeadEvent(arrayOfLeadEvent []components.LeadEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeArrayOfLeadEvent

	return ListEventsResponseBody{
		ArrayOfLeadEvent: arrayOfLeadEvent,
		Type:             typ,
	}
}

func CreateListEventsResponseBodyArrayOfSaleEvent(arrayOfSaleEvent []components.SaleEvent) ListEventsResponseBody {
	typ := ListEventsResponseBodyTypeArrayOfSaleEvent

	return ListEventsResponseBody{
		ArrayOfSaleEvent: arrayOfSaleEvent,
		Type:             typ,
	}
}

func (u *ListEventsResponseBody) UnmarshalJSON(data []byte) error {

	var arrayOfClickEvent []components.ClickEvent = []components.ClickEvent{}
	if err := utils.UnmarshalJSON(data, &arrayOfClickEvent, "", true, true); err == nil {
		u.ArrayOfClickEvent = arrayOfClickEvent
		u.Type = ListEventsResponseBodyTypeArrayOfClickEvent
		return nil
	}

	var arrayOfLeadEvent []components.LeadEvent = []components.LeadEvent{}
	if err := utils.UnmarshalJSON(data, &arrayOfLeadEvent, "", true, true); err == nil {
		u.ArrayOfLeadEvent = arrayOfLeadEvent
		u.Type = ListEventsResponseBodyTypeArrayOfLeadEvent
		return nil
	}

	var arrayOfSaleEvent []components.SaleEvent = []components.SaleEvent{}
	if err := utils.UnmarshalJSON(data, &arrayOfSaleEvent, "", true, true); err == nil {
		u.ArrayOfSaleEvent = arrayOfSaleEvent
		u.Type = ListEventsResponseBodyTypeArrayOfSaleEvent
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListEventsResponseBody", string(data))
}

func (u ListEventsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfClickEvent != nil {
		return utils.MarshalJSON(u.ArrayOfClickEvent, "", true)
	}

	if u.ArrayOfLeadEvent != nil {
		return utils.MarshalJSON(u.ArrayOfLeadEvent, "", true)
	}

	if u.ArrayOfSaleEvent != nil {
		return utils.MarshalJSON(u.ArrayOfSaleEvent, "", true)
	}

	return nil, errors.New("could not marshal union type ListEventsResponseBody: all fields are null")
}
