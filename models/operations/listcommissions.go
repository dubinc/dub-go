// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type Type string

const (
	TypeClick  Type = "click"
	TypeLead   Type = "lead"
	TypeSale   Type = "sale"
	TypeCustom Type = "custom"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// QueryParamStatus - Filter the list of commissions by their corresponding status.
type QueryParamStatus string

const (
	QueryParamStatusPending   QueryParamStatus = "pending"
	QueryParamStatusProcessed QueryParamStatus = "processed"
	QueryParamStatusPaid      QueryParamStatus = "paid"
	QueryParamStatusRefunded  QueryParamStatus = "refunded"
	QueryParamStatusDuplicate QueryParamStatus = "duplicate"
	QueryParamStatusFraud     QueryParamStatus = "fraud"
	QueryParamStatusCanceled  QueryParamStatus = "canceled"
)

func (e QueryParamStatus) ToPointer() *QueryParamStatus {
	return &e
}
func (e *QueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = QueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamStatus: %v", v)
	}
}

// ListCommissionsQueryParamSortBy - The field to sort the list of commissions by.
type ListCommissionsQueryParamSortBy string

const (
	ListCommissionsQueryParamSortByCreatedAt ListCommissionsQueryParamSortBy = "createdAt"
	ListCommissionsQueryParamSortByAmount    ListCommissionsQueryParamSortBy = "amount"
)

func (e ListCommissionsQueryParamSortBy) ToPointer() *ListCommissionsQueryParamSortBy {
	return &e
}
func (e *ListCommissionsQueryParamSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		fallthrough
	case "amount":
		*e = ListCommissionsQueryParamSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsQueryParamSortBy: %v", v)
	}
}

// ListCommissionsQueryParamSortOrder - The sort order for the list of commissions.
type ListCommissionsQueryParamSortOrder string

const (
	ListCommissionsQueryParamSortOrderAsc  ListCommissionsQueryParamSortOrder = "asc"
	ListCommissionsQueryParamSortOrderDesc ListCommissionsQueryParamSortOrder = "desc"
)

func (e ListCommissionsQueryParamSortOrder) ToPointer() *ListCommissionsQueryParamSortOrder {
	return &e
}
func (e *ListCommissionsQueryParamSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListCommissionsQueryParamSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsQueryParamSortOrder: %v", v)
	}
}

// ListCommissionsQueryParamInterval - The interval to retrieve commissions for.
type ListCommissionsQueryParamInterval string

const (
	ListCommissionsQueryParamIntervalTwentyFourh ListCommissionsQueryParamInterval = "24h"
	ListCommissionsQueryParamIntervalSevend      ListCommissionsQueryParamInterval = "7d"
	ListCommissionsQueryParamIntervalThirtyd     ListCommissionsQueryParamInterval = "30d"
	ListCommissionsQueryParamIntervalNinetyd     ListCommissionsQueryParamInterval = "90d"
	ListCommissionsQueryParamIntervalOney        ListCommissionsQueryParamInterval = "1y"
	ListCommissionsQueryParamIntervalMtd         ListCommissionsQueryParamInterval = "mtd"
	ListCommissionsQueryParamIntervalQtd         ListCommissionsQueryParamInterval = "qtd"
	ListCommissionsQueryParamIntervalYtd         ListCommissionsQueryParamInterval = "ytd"
	ListCommissionsQueryParamIntervalAll         ListCommissionsQueryParamInterval = "all"
)

func (e ListCommissionsQueryParamInterval) ToPointer() *ListCommissionsQueryParamInterval {
	return &e
}
func (e *ListCommissionsQueryParamInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "1y":
		fallthrough
	case "mtd":
		fallthrough
	case "qtd":
		fallthrough
	case "ytd":
		fallthrough
	case "all":
		*e = ListCommissionsQueryParamInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsQueryParamInterval: %v", v)
	}
}

type ListCommissionsRequest struct {
	Type *Type `queryParam:"style=form,explode=true,name=type"`
	// Filter the list of commissions by the associated customer.
	CustomerID *string `queryParam:"style=form,explode=true,name=customerId"`
	// Filter the list of commissions by the associated payout.
	PayoutID *string `queryParam:"style=form,explode=true,name=payoutId"`
	// Filter the list of commissions by the associated partner.
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	// Filter the list of commissions by the associated partner group.
	GroupID *string `queryParam:"style=form,explode=true,name=groupId"`
	// Filter the list of commissions by the associated invoice. Since invoiceId is unique on a per-program basis, this will only return one commission per invoice.
	InvoiceID *string `queryParam:"style=form,explode=true,name=invoiceId"`
	// Filter the list of commissions by their corresponding status.
	Status *QueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// The field to sort the list of commissions by.
	SortBy *ListCommissionsQueryParamSortBy `default:"createdAt" queryParam:"style=form,explode=true,name=sortBy"`
	// The sort order for the list of commissions.
	SortOrder *ListCommissionsQueryParamSortOrder `default:"desc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The interval to retrieve commissions for.
	Interval *ListCommissionsQueryParamInterval `default:"all" queryParam:"style=form,explode=true,name=interval"`
	// The start date of the date range to filter the commissions by.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date of the date range to filter the commissions by.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (l ListCommissionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCommissionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCommissionsRequest) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListCommissionsRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListCommissionsRequest) GetPayoutID() *string {
	if o == nil {
		return nil
	}
	return o.PayoutID
}

func (o *ListCommissionsRequest) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *ListCommissionsRequest) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *ListCommissionsRequest) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *ListCommissionsRequest) GetStatus() *QueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListCommissionsRequest) GetSortBy() *ListCommissionsQueryParamSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *ListCommissionsRequest) GetSortOrder() *ListCommissionsQueryParamSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListCommissionsRequest) GetInterval() *ListCommissionsQueryParamInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *ListCommissionsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *ListCommissionsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *ListCommissionsRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListCommissionsRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListCommissionsType string

const (
	ListCommissionsTypeClick  ListCommissionsType = "click"
	ListCommissionsTypeLead   ListCommissionsType = "lead"
	ListCommissionsTypeSale   ListCommissionsType = "sale"
	ListCommissionsTypeCustom ListCommissionsType = "custom"
)

func (e ListCommissionsType) ToPointer() *ListCommissionsType {
	return &e
}
func (e *ListCommissionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = ListCommissionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsType: %v", v)
	}
}

type ListCommissionsStatus string

const (
	ListCommissionsStatusPending   ListCommissionsStatus = "pending"
	ListCommissionsStatusProcessed ListCommissionsStatus = "processed"
	ListCommissionsStatusPaid      ListCommissionsStatus = "paid"
	ListCommissionsStatusRefunded  ListCommissionsStatus = "refunded"
	ListCommissionsStatusDuplicate ListCommissionsStatus = "duplicate"
	ListCommissionsStatusFraud     ListCommissionsStatus = "fraud"
	ListCommissionsStatusCanceled  ListCommissionsStatus = "canceled"
)

func (e ListCommissionsStatus) ToPointer() *ListCommissionsStatus {
	return &e
}
func (e *ListCommissionsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = ListCommissionsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCommissionsStatus: %v", v)
	}
}

type ListCommissionsPartner struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
	// The date when the partner enabled payouts.
	PayoutsEnabledAt *string `json:"payoutsEnabledAt"`
	// The partner's country (required for tax purposes).
	Country *string `json:"country"`
}

func (o *ListCommissionsPartner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCommissionsPartner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCommissionsPartner) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListCommissionsPartner) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *ListCommissionsPartner) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *ListCommissionsPartner) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type ListCommissionsCustomer struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// Total number of sales for the customer.
	Sales *float64 `json:"sales,omitempty"`
	// Total amount of sales for the customer.
	SaleAmount *float64 `json:"saleAmount,omitempty"`
	// The date the customer was created.
	CreatedAt string `json:"createdAt"`
}

func (o *ListCommissionsCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCommissionsCustomer) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *ListCommissionsCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCommissionsCustomer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListCommissionsCustomer) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *ListCommissionsCustomer) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *ListCommissionsCustomer) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *ListCommissionsCustomer) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *ListCommissionsCustomer) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

type ListCommissionsResponseBody struct {
	// The commission's unique ID on Dub.
	ID          string                `json:"id"`
	Type        *ListCommissionsType  `json:"type,omitempty"`
	Amount      float64               `json:"amount"`
	Earnings    float64               `json:"earnings"`
	Currency    string                `json:"currency"`
	Status      ListCommissionsStatus `json:"status"`
	InvoiceID   *string               `json:"invoiceId"`
	Description *string               `json:"description"`
	Quantity    float64               `json:"quantity"`
	// The user who created the manual commission.
	UserID    *string                  `json:"userId,omitempty"`
	CreatedAt string                   `json:"createdAt"`
	UpdatedAt string                   `json:"updatedAt"`
	Partner   ListCommissionsPartner   `json:"partner"`
	Customer  *ListCommissionsCustomer `json:"customer,omitempty"`
}

func (o *ListCommissionsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCommissionsResponseBody) GetType() *ListCommissionsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListCommissionsResponseBody) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCommissionsResponseBody) GetEarnings() float64 {
	if o == nil {
		return 0.0
	}
	return o.Earnings
}

func (o *ListCommissionsResponseBody) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCommissionsResponseBody) GetStatus() ListCommissionsStatus {
	if o == nil {
		return ListCommissionsStatus("")
	}
	return o.Status
}

func (o *ListCommissionsResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *ListCommissionsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListCommissionsResponseBody) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListCommissionsResponseBody) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ListCommissionsResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListCommissionsResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *ListCommissionsResponseBody) GetPartner() ListCommissionsPartner {
	if o == nil {
		return ListCommissionsPartner{}
	}
	return o.Partner
}

func (o *ListCommissionsResponseBody) GetCustomer() *ListCommissionsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}
