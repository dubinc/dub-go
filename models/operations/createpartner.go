// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type CreatePartnerTagIdsType string

const (
	CreatePartnerTagIdsTypeStr        CreatePartnerTagIdsType = "str"
	CreatePartnerTagIdsTypeArrayOfStr CreatePartnerTagIdsType = "arrayOfStr"
)

// CreatePartnerTagIds - The unique IDs of the tags assigned to the short link.
type CreatePartnerTagIds struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CreatePartnerTagIdsType
}

func CreateCreatePartnerTagIdsStr(str string) CreatePartnerTagIds {
	typ := CreatePartnerTagIdsTypeStr

	return CreatePartnerTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerTagIdsArrayOfStr(arrayOfStr []string) CreatePartnerTagIds {
	typ := CreatePartnerTagIdsTypeArrayOfStr

	return CreatePartnerTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = CreatePartnerTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, false); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerTagIds", string(data))
}

func (u CreatePartnerTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerTagIds: all fields are null")
}

type CreatePartnerTagNamesType string

const (
	CreatePartnerTagNamesTypeStr        CreatePartnerTagNamesType = "str"
	CreatePartnerTagNamesTypeArrayOfStr CreatePartnerTagNamesType = "arrayOfStr"
)

// CreatePartnerTagNames - The unique name of the tags assigned to the short link (case insensitive).
type CreatePartnerTagNames struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CreatePartnerTagNamesType
}

func CreateCreatePartnerTagNamesStr(str string) CreatePartnerTagNames {
	typ := CreatePartnerTagNamesTypeStr

	return CreatePartnerTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerTagNamesArrayOfStr(arrayOfStr []string) CreatePartnerTagNames {
	typ := CreatePartnerTagNamesTypeArrayOfStr

	return CreatePartnerTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = CreatePartnerTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, false); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerTagNames", string(data))
}

func (u CreatePartnerTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerTagNames: all fields are null")
}

type CreatePartnerTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *CreatePartnerTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

// LinkProps - Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
type LinkProps struct {
	// The length of the short link slug. Defaults to 7 if not provided. When used with `prefix`, the total length of the key will be `prefix.length + keyLength`.
	KeyLength *float64 `json:"keyLength,omitempty"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *CreatePartnerTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *CreatePartnerTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Link Previews feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []CreatePartnerTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *LinkProps) GetKeyLength() *float64 {
	if o == nil {
		return nil
	}
	return o.KeyLength
}

func (o *LinkProps) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *LinkProps) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *LinkProps) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *LinkProps) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *LinkProps) GetTagIds() *CreatePartnerTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *LinkProps) GetTagNames() *CreatePartnerTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *LinkProps) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *LinkProps) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *LinkProps) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *LinkProps) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *LinkProps) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LinkProps) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *LinkProps) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *LinkProps) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LinkProps) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *LinkProps) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *LinkProps) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *LinkProps) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *LinkProps) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *LinkProps) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *LinkProps) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *LinkProps) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *LinkProps) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *LinkProps) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *LinkProps) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *LinkProps) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *LinkProps) GetTestVariants() []CreatePartnerTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *LinkProps) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *LinkProps) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type CreatePartnerRequestBody struct {
	// The partner's full name. If undefined, the partner's email will be used in lieu of their name (e.g. `john@acme.com`)
	Name *string `json:"name,omitempty"`
	// The partner's email address. Partners will be able to claim their profile by signing up at `partners.dub.co` with this email.
	Email string `json:"email"`
	// The partner's unique username in your system (max 100 characters). This will be used to create a short link for the partner using your program's default domain. If not provided, Dub will try to generate a username from the partner's name or email.
	Username *string `json:"username,omitempty"`
	// The partner's avatar image. If not provided, a default avatar will be used.
	Image *string `json:"image,omitempty"`
	// The partner's unique ID in your system. Useful for retrieving the partner's links and stats later on. If not provided, the partner will be created as a standalone partner.
	TenantID *string `json:"tenantId,omitempty"`
	// The group ID to add the partner to. If not provided, the partner will be added to the default group.
	GroupID *string `json:"groupId,omitempty"`
	// The partner's country of residence. Must be passed as a 2-letter ISO 3166-1 country code. See https://d.to/geo for more information.
	Country *string `json:"country,omitempty"`
	// A brief description of the partner and their background. Max 5,000 characters.
	Description *string `json:"description,omitempty"`
	// Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
	LinkProps *LinkProps `json:"linkProps,omitempty"`
}

func (o *CreatePartnerRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreatePartnerRequestBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreatePartnerRequestBody) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CreatePartnerRequestBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerRequestBody) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *CreatePartnerRequestBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreatePartnerRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerRequestBody) GetLinkProps() *LinkProps {
	if o == nil {
		return nil
	}
	return o.LinkProps
}

// CreatePartnerStatus - The status of the partner's enrollment in the program.
type CreatePartnerStatus string

const (
	CreatePartnerStatusPending  CreatePartnerStatus = "pending"
	CreatePartnerStatusApproved CreatePartnerStatus = "approved"
	CreatePartnerStatusRejected CreatePartnerStatus = "rejected"
	CreatePartnerStatusInvited  CreatePartnerStatus = "invited"
	CreatePartnerStatusDeclined CreatePartnerStatus = "declined"
	CreatePartnerStatusBanned   CreatePartnerStatus = "banned"
	CreatePartnerStatusArchived CreatePartnerStatus = "archived"
)

func (e CreatePartnerStatus) ToPointer() *CreatePartnerStatus {
	return &e
}
func (e *CreatePartnerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "invited":
		fallthrough
	case "declined":
		fallthrough
	case "banned":
		fallthrough
	case "archived":
		*e = CreatePartnerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePartnerStatus: %v", v)
	}
}

type CreatePartnerLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short link has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The total number of sales (includes recurring sales) generated by the short link.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar value of sales (in cents) generated by the short link.
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (c CreatePartnerLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePartnerLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePartnerLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePartnerLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreatePartnerLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreatePartnerLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *CreatePartnerLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *CreatePartnerLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *CreatePartnerLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CreatePartnerLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

// BannedReason - If the partner was banned from the program, this is the reason for the ban.
type BannedReason string

const (
	BannedReasonTosViolation         BannedReason = "tos_violation"
	BannedReasonInappropriateContent BannedReason = "inappropriate_content"
	BannedReasonFakeTraffic          BannedReason = "fake_traffic"
	BannedReasonFraud                BannedReason = "fraud"
	BannedReasonSpam                 BannedReason = "spam"
	BannedReasonBrandAbuse           BannedReason = "brand_abuse"
)

func (e BannedReason) ToPointer() *BannedReason {
	return &e
}
func (e *BannedReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tos_violation":
		fallthrough
	case "inappropriate_content":
		fallthrough
	case "fake_traffic":
		fallthrough
	case "fraud":
		fallthrough
	case "spam":
		fallthrough
	case "brand_abuse":
		*e = BannedReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BannedReason: %v", v)
	}
}

// CreatePartnerResponseBody - The created partner
type CreatePartnerResponseBody struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
	// A brief description of the partner and their background.
	Description *string `json:"description,omitempty"`
	// The partner's country (required for tax purposes).
	Country *string `json:"country"`
	// The partner's PayPal email (for receiving payouts via PayPal).
	PaypalEmail *string `json:"paypalEmail"`
	// The partner's Stripe Connect ID (for receiving payouts via Stripe).
	StripeConnectID *string `json:"stripeConnectId"`
	// The date when the partner enabled payouts.
	PayoutsEnabledAt *string `json:"payoutsEnabledAt"`
	// The program's unique ID on Dub.
	ProgramID string `json:"programId"`
	// The partner's group ID on Dub.
	GroupID *string `json:"groupId,omitempty"`
	// The partner's unique ID on Dub.
	PartnerID string `json:"partnerId"`
	// The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
	TenantID  *string `json:"tenantId"`
	CreatedAt string  `json:"createdAt"`
	// The status of the partner's enrollment in the program.
	Status CreatePartnerStatus `json:"status"`
	// The partner's referral links in this program.
	Links []CreatePartnerLink `json:"links"`
	// The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
	TotalCommissions *float64 `default:"0" json:"totalCommissions"`
	ClickRewardID    *string  `json:"clickRewardId,omitempty"`
	LeadRewardID     *string  `json:"leadRewardId,omitempty"`
	SaleRewardID     *string  `json:"saleRewardId,omitempty"`
	DiscountID       *string  `json:"discountId,omitempty"`
	// If the partner submitted an application to join the program, this is the ID of the application.
	ApplicationID *string `json:"applicationId,omitempty"`
	// If the partner was banned from the program, this is the date of the ban.
	BannedAt *string `json:"bannedAt,omitempty"`
	// If the partner was banned from the program, this is the reason for the ban.
	BannedReason *BannedReason `json:"bannedReason,omitempty"`
	// The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	Clicks *float64 `default:"0" json:"clicks"`
	// The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	Leads *float64 `default:"0" json:"leads"`
	// The total number of leads that converted to paying customers. Defaults to 0 if `includeExpandedFields` is false.
	Conversions *float64 `default:"0" json:"conversions"`
	// The total number of sales generated by the partner's links (includes recurring sales). Defaults to 0 if `includeExpandedFields` is false.
	Sales *float64 `default:"0" json:"sales"`
	// The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
	SaleAmount *float64 `default:"0" json:"saleAmount"`
	// The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
	NetRevenue *float64 `default:"0" json:"netRevenue"`
	// The partner's website URL (including the https protocol).
	Website           *string `json:"website,omitempty"`
	WebsiteTxtRecord  *string `json:"websiteTxtRecord,omitempty"`
	WebsiteVerifiedAt *string `json:"websiteVerifiedAt,omitempty"`
	// The partner's YouTube channel username (e.g. `johndoe`).
	Youtube                *string  `json:"youtube,omitempty"`
	YoutubeVerifiedAt      *string  `json:"youtubeVerifiedAt,omitempty"`
	YoutubeSubscriberCount *float64 `json:"youtubeSubscriberCount,omitempty"`
	YoutubeViewCount       *float64 `json:"youtubeViewCount,omitempty"`
	// The partner's Twitter username (e.g. `johndoe`).
	Twitter           *string `json:"twitter,omitempty"`
	TwitterVerifiedAt *string `json:"twitterVerifiedAt,omitempty"`
	// The partner's LinkedIn username (e.g. `johndoe`).
	Linkedin           *string `json:"linkedin,omitempty"`
	LinkedinVerifiedAt *string `json:"linkedinVerifiedAt,omitempty"`
	// The partner's Instagram username (e.g. `johndoe`).
	Instagram           *string `json:"instagram,omitempty"`
	InstagramVerifiedAt *string `json:"instagramVerifiedAt,omitempty"`
	// The partner's TikTok username (e.g. `johndoe`).
	Tiktok           *string `json:"tiktok,omitempty"`
	TiktokVerifiedAt *string `json:"tiktokVerifiedAt,omitempty"`
}

func (c CreatePartnerResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePartnerResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePartnerResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePartnerResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePartnerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePartnerResponseBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreatePartnerResponseBody) GetPaypalEmail() *string {
	if o == nil {
		return nil
	}
	return o.PaypalEmail
}

func (o *CreatePartnerResponseBody) GetStripeConnectID() *string {
	if o == nil {
		return nil
	}
	return o.StripeConnectID
}

func (o *CreatePartnerResponseBody) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *CreatePartnerResponseBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *CreatePartnerResponseBody) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *CreatePartnerResponseBody) GetPartnerID() string {
	if o == nil {
		return ""
	}
	return o.PartnerID
}

func (o *CreatePartnerResponseBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreatePartnerResponseBody) GetStatus() CreatePartnerStatus {
	if o == nil {
		return CreatePartnerStatus("")
	}
	return o.Status
}

func (o *CreatePartnerResponseBody) GetLinks() []CreatePartnerLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *CreatePartnerResponseBody) GetTotalCommissions() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalCommissions
}

func (o *CreatePartnerResponseBody) GetClickRewardID() *string {
	if o == nil {
		return nil
	}
	return o.ClickRewardID
}

func (o *CreatePartnerResponseBody) GetLeadRewardID() *string {
	if o == nil {
		return nil
	}
	return o.LeadRewardID
}

func (o *CreatePartnerResponseBody) GetSaleRewardID() *string {
	if o == nil {
		return nil
	}
	return o.SaleRewardID
}

func (o *CreatePartnerResponseBody) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CreatePartnerResponseBody) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *CreatePartnerResponseBody) GetBannedAt() *string {
	if o == nil {
		return nil
	}
	return o.BannedAt
}

func (o *CreatePartnerResponseBody) GetBannedReason() *BannedReason {
	if o == nil {
		return nil
	}
	return o.BannedReason
}

func (o *CreatePartnerResponseBody) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *CreatePartnerResponseBody) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *CreatePartnerResponseBody) GetConversions() *float64 {
	if o == nil {
		return nil
	}
	return o.Conversions
}

func (o *CreatePartnerResponseBody) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CreatePartnerResponseBody) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *CreatePartnerResponseBody) GetNetRevenue() *float64 {
	if o == nil {
		return nil
	}
	return o.NetRevenue
}

func (o *CreatePartnerResponseBody) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *CreatePartnerResponseBody) GetWebsiteTxtRecord() *string {
	if o == nil {
		return nil
	}
	return o.WebsiteTxtRecord
}

func (o *CreatePartnerResponseBody) GetWebsiteVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.WebsiteVerifiedAt
}

func (o *CreatePartnerResponseBody) GetYoutube() *string {
	if o == nil {
		return nil
	}
	return o.Youtube
}

func (o *CreatePartnerResponseBody) GetYoutubeVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.YoutubeVerifiedAt
}

func (o *CreatePartnerResponseBody) GetYoutubeSubscriberCount() *float64 {
	if o == nil {
		return nil
	}
	return o.YoutubeSubscriberCount
}

func (o *CreatePartnerResponseBody) GetYoutubeViewCount() *float64 {
	if o == nil {
		return nil
	}
	return o.YoutubeViewCount
}

func (o *CreatePartnerResponseBody) GetTwitter() *string {
	if o == nil {
		return nil
	}
	return o.Twitter
}

func (o *CreatePartnerResponseBody) GetTwitterVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.TwitterVerifiedAt
}

func (o *CreatePartnerResponseBody) GetLinkedin() *string {
	if o == nil {
		return nil
	}
	return o.Linkedin
}

func (o *CreatePartnerResponseBody) GetLinkedinVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.LinkedinVerifiedAt
}

func (o *CreatePartnerResponseBody) GetInstagram() *string {
	if o == nil {
		return nil
	}
	return o.Instagram
}

func (o *CreatePartnerResponseBody) GetInstagramVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.InstagramVerifiedAt
}

func (o *CreatePartnerResponseBody) GetTiktok() *string {
	if o == nil {
		return nil
	}
	return o.Tiktok
}

func (o *CreatePartnerResponseBody) GetTiktokVerifiedAt() *string {
	if o == nil {
		return nil
	}
	return o.TiktokVerifiedAt
}
