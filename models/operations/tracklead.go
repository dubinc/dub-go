// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

// Mode - The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub; `deferred` will defer the lead event creation to a subsequent request.
type Mode string

const (
	ModeAsync    Mode = "async"
	ModeWait     Mode = "wait"
	ModeDeferred Mode = "deferred"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "async":
		fallthrough
	case "wait":
		fallthrough
	case "deferred":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type TrackLeadRequestBody struct {
	// The unique ID of the click that the lead conversion event is attributed to. You can read this value from `dub_id` cookie. [For deferred lead tracking]: If an empty string is provided, Dub will try to find an existing customer with the provided `customerExternalId` and use the `clickId` from the customer if found.
	ClickID string `json:"clickId"`
	// The name of the lead event to track. Can also be used as a unique identifier to associate a given lead event for a customer for a subsequent sale event (via the `leadEventName` prop in `/track/sale`).
	EventName string `json:"eventName"`
	// The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
	CustomerExternalID string `json:"customerExternalId"`
	// The name of the customer. If not passed, a random name will be generated (e.g. “Big Red Caribou”).
	CustomerName *string `default:"null" json:"customerName"`
	// The email address of the customer.
	CustomerEmail *string `default:"null" json:"customerEmail"`
	// The avatar URL of the customer.
	CustomerAvatar *string `default:"null" json:"customerAvatar"`
	// The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub; `deferred` will defer the lead event creation to a subsequent request.
	Mode *Mode `default:"async" json:"mode"`
	// The numerical value associated with this lead event (e.g., number of provisioned seats in a free trial). If defined as N, the lead event will be tracked N times.
	EventQuantity *float64 `json:"eventQuantity,omitempty"`
	// Additional metadata to be stored with the lead event. Max 10,000 characters.
	Metadata map[string]any `json:"metadata,omitempty"`
}

func (t TrackLeadRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrackLeadRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"clickId", "eventName", "customerExternalId"}); err != nil {
		return err
	}
	return nil
}

func (t *TrackLeadRequestBody) GetClickID() string {
	if t == nil {
		return ""
	}
	return t.ClickID
}

func (t *TrackLeadRequestBody) GetEventName() string {
	if t == nil {
		return ""
	}
	return t.EventName
}

func (t *TrackLeadRequestBody) GetCustomerExternalID() string {
	if t == nil {
		return ""
	}
	return t.CustomerExternalID
}

func (t *TrackLeadRequestBody) GetCustomerName() *string {
	if t == nil {
		return nil
	}
	return t.CustomerName
}

func (t *TrackLeadRequestBody) GetCustomerEmail() *string {
	if t == nil {
		return nil
	}
	return t.CustomerEmail
}

func (t *TrackLeadRequestBody) GetCustomerAvatar() *string {
	if t == nil {
		return nil
	}
	return t.CustomerAvatar
}

func (t *TrackLeadRequestBody) GetMode() *Mode {
	if t == nil {
		return nil
	}
	return t.Mode
}

func (t *TrackLeadRequestBody) GetEventQuantity() *float64 {
	if t == nil {
		return nil
	}
	return t.EventQuantity
}

func (t *TrackLeadRequestBody) GetMetadata() map[string]any {
	if t == nil {
		return nil
	}
	return t.Metadata
}

type Click struct {
	ID string `json:"id"`
}

func (c *Click) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

type TrackLeadLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The ID of the partner the short link is associated with.
	PartnerID *string `json:"partnerId"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId"`
}

func (t *TrackLeadLink) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TrackLeadLink) GetDomain() string {
	if t == nil {
		return ""
	}
	return t.Domain
}

func (t *TrackLeadLink) GetKey() string {
	if t == nil {
		return ""
	}
	return t.Key
}

func (t *TrackLeadLink) GetShortLink() string {
	if t == nil {
		return ""
	}
	return t.ShortLink
}

func (t *TrackLeadLink) GetURL() string {
	if t == nil {
		return ""
	}
	return t.URL
}

func (t *TrackLeadLink) GetPartnerID() *string {
	if t == nil {
		return nil
	}
	return t.PartnerID
}

func (t *TrackLeadLink) GetProgramID() *string {
	if t == nil {
		return nil
	}
	return t.ProgramID
}

func (t *TrackLeadLink) GetTenantID() *string {
	if t == nil {
		return nil
	}
	return t.TenantID
}

func (t *TrackLeadLink) GetExternalID() *string {
	if t == nil {
		return nil
	}
	return t.ExternalID
}

type Customer struct {
	Name       *string `json:"name"`
	Email      *string `json:"email"`
	Avatar     *string `json:"avatar"`
	ExternalID *string `json:"externalId"`
}

func (c *Customer) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *Customer) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *Customer) GetAvatar() *string {
	if c == nil {
		return nil
	}
	return c.Avatar
}

func (c *Customer) GetExternalID() *string {
	if c == nil {
		return nil
	}
	return c.ExternalID
}

// TrackLeadResponseBody - A lead was tracked.
type TrackLeadResponseBody struct {
	Click    Click          `json:"click"`
	Link     *TrackLeadLink `json:"link"`
	Customer Customer       `json:"customer"`
}

func (t *TrackLeadResponseBody) GetClick() Click {
	if t == nil {
		return Click{}
	}
	return t.Click
}

func (t *TrackLeadResponseBody) GetLink() *TrackLeadLink {
	if t == nil {
		return nil
	}
	return t.Link
}

func (t *TrackLeadResponseBody) GetCustomer() Customer {
	if t == nil {
		return Customer{}
	}
	return t.Customer
}
