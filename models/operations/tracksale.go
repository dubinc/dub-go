// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

// PaymentProcessor - The payment processor via which the sale was made.
type PaymentProcessor string

const (
	PaymentProcessorStripe     PaymentProcessor = "stripe"
	PaymentProcessorShopify    PaymentProcessor = "shopify"
	PaymentProcessorPolar      PaymentProcessor = "polar"
	PaymentProcessorPaddle     PaymentProcessor = "paddle"
	PaymentProcessorRevenuecat PaymentProcessor = "revenuecat"
	PaymentProcessorCustom     PaymentProcessor = "custom"
)

func (e PaymentProcessor) ToPointer() *PaymentProcessor {
	return &e
}
func (e *PaymentProcessor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		fallthrough
	case "shopify":
		fallthrough
	case "polar":
		fallthrough
	case "paddle":
		fallthrough
	case "revenuecat":
		fallthrough
	case "custom":
		*e = PaymentProcessor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentProcessor: %v", v)
	}
}

type TrackSaleRequestBody struct {
	// The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
	CustomerExternalID string `json:"customerExternalId"`
	// The amount of the sale in cents (for all two-decimal currencies). If the sale is in a zero-decimal currency, pass the full integer value (e.g. `1437` JPY). Learn more: https://d.to/currency
	Amount int64 `json:"amount"`
	// The currency of the sale. Accepts ISO 4217 currency codes. Sales will be automatically converted and stored as USD at the latest exchange rates. Learn more: https://d.to/currency
	Currency *string `default:"usd" json:"currency"`
	// The name of the sale event. Recommended format: `Invoice paid` or `Subscription created`.
	EventName *string `default:"Purchase" json:"eventName"`
	// The payment processor via which the sale was made.
	PaymentProcessor *PaymentProcessor `default:"custom" json:"paymentProcessor"`
	// The invoice ID of the sale. Can be used as a idempotency key – only one sale event can be recorded for a given invoice ID.
	InvoiceID *string `default:"null" json:"invoiceId"`
	// Additional metadata to be stored with the sale event. Max 10,000 characters when stringified.
	Metadata map[string]any `json:"metadata,omitempty"`
	// The name of the lead event that occurred before the sale (case-sensitive). This is used to associate the sale event with a particular lead event (instead of the latest lead event for a link-customer combination, which is the default behavior). For direct sale tracking, this field can also be used to specify the lead event name.
	LeadEventName *string `default:"null" json:"leadEventName"`
	// [For direct sale tracking]: The unique ID of the click that the sale conversion event is attributed to. You can read this value from `dub_id` cookie.
	ClickID *string `json:"clickId,omitempty"`
	// [For direct sale tracking]: The name of the customer. If not passed, a random name will be generated (e.g. “Big Red Caribou”).
	CustomerName *string `default:"null" json:"customerName"`
	// [For direct sale tracking]: The email address of the customer.
	CustomerEmail *string `default:"null" json:"customerEmail"`
	// [For direct sale tracking]: The avatar URL of the customer.
	CustomerAvatar *string `default:"null" json:"customerAvatar"`
}

func (t TrackSaleRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrackSaleRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"customerExternalId", "amount"}); err != nil {
		return err
	}
	return nil
}

func (t *TrackSaleRequestBody) GetCustomerExternalID() string {
	if t == nil {
		return ""
	}
	return t.CustomerExternalID
}

func (t *TrackSaleRequestBody) GetAmount() int64 {
	if t == nil {
		return 0
	}
	return t.Amount
}

func (t *TrackSaleRequestBody) GetCurrency() *string {
	if t == nil {
		return nil
	}
	return t.Currency
}

func (t *TrackSaleRequestBody) GetEventName() *string {
	if t == nil {
		return nil
	}
	return t.EventName
}

func (t *TrackSaleRequestBody) GetPaymentProcessor() *PaymentProcessor {
	if t == nil {
		return nil
	}
	return t.PaymentProcessor
}

func (t *TrackSaleRequestBody) GetInvoiceID() *string {
	if t == nil {
		return nil
	}
	return t.InvoiceID
}

func (t *TrackSaleRequestBody) GetMetadata() map[string]any {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *TrackSaleRequestBody) GetLeadEventName() *string {
	if t == nil {
		return nil
	}
	return t.LeadEventName
}

func (t *TrackSaleRequestBody) GetClickID() *string {
	if t == nil {
		return nil
	}
	return t.ClickID
}

func (t *TrackSaleRequestBody) GetCustomerName() *string {
	if t == nil {
		return nil
	}
	return t.CustomerName
}

func (t *TrackSaleRequestBody) GetCustomerEmail() *string {
	if t == nil {
		return nil
	}
	return t.CustomerEmail
}

func (t *TrackSaleRequestBody) GetCustomerAvatar() *string {
	if t == nil {
		return nil
	}
	return t.CustomerAvatar
}

type TrackSaleCustomer struct {
	ID         string  `json:"id"`
	Name       *string `json:"name"`
	Email      *string `json:"email"`
	Avatar     *string `json:"avatar"`
	ExternalID *string `json:"externalId"`
}

func (t *TrackSaleCustomer) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TrackSaleCustomer) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TrackSaleCustomer) GetEmail() *string {
	if t == nil {
		return nil
	}
	return t.Email
}

func (t *TrackSaleCustomer) GetAvatar() *string {
	if t == nil {
		return nil
	}
	return t.Avatar
}

func (t *TrackSaleCustomer) GetExternalID() *string {
	if t == nil {
		return nil
	}
	return t.ExternalID
}

type Sale struct {
	Amount           float64        `json:"amount"`
	Currency         string         `json:"currency"`
	PaymentProcessor string         `json:"paymentProcessor"`
	InvoiceID        *string        `json:"invoiceId"`
	Metadata         map[string]any `json:"metadata"`
}

func (s *Sale) GetAmount() float64 {
	if s == nil {
		return 0.0
	}
	return s.Amount
}

func (s *Sale) GetCurrency() string {
	if s == nil {
		return ""
	}
	return s.Currency
}

func (s *Sale) GetPaymentProcessor() string {
	if s == nil {
		return ""
	}
	return s.PaymentProcessor
}

func (s *Sale) GetInvoiceID() *string {
	if s == nil {
		return nil
	}
	return s.InvoiceID
}

func (s *Sale) GetMetadata() map[string]any {
	if s == nil {
		return nil
	}
	return s.Metadata
}

// TrackSaleResponseBody - A sale was tracked.
type TrackSaleResponseBody struct {
	EventName string             `json:"eventName"`
	Customer  *TrackSaleCustomer `json:"customer"`
	Sale      *Sale              `json:"sale"`
}

func (t *TrackSaleResponseBody) GetEventName() string {
	if t == nil {
		return ""
	}
	return t.EventName
}

func (t *TrackSaleResponseBody) GetCustomer() *TrackSaleCustomer {
	if t == nil {
		return nil
	}
	return t.Customer
}

func (t *TrackSaleResponseBody) GetSale() *Sale {
	if t == nil {
		return nil
	}
	return t.Sale
}
