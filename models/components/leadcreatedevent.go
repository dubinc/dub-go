// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type LeadCreatedEventEvent string

const (
	LeadCreatedEventEventLeadCreated LeadCreatedEventEvent = "lead.created"
)

func (e LeadCreatedEventEvent) ToPointer() *LeadCreatedEventEvent {
	return &e
}
func (e *LeadCreatedEventEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lead.created":
		*e = LeadCreatedEventEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LeadCreatedEventEvent: %v", v)
	}
}

type LeadCreatedEventCustomer struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// Total number of sales for the customer.
	Sales *float64 `json:"sales,omitempty"`
	// Total amount of sales for the customer.
	SaleAmount *float64 `json:"saleAmount,omitempty"`
	// The date the customer was created.
	CreatedAt string `json:"createdAt"`
}

func (l LeadCreatedEventCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LeadCreatedEventCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "externalId", "name", "createdAt"}); err != nil {
		return err
	}
	return nil
}

func (o *LeadCreatedEventCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LeadCreatedEventCustomer) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *LeadCreatedEventCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LeadCreatedEventCustomer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *LeadCreatedEventCustomer) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *LeadCreatedEventCustomer) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *LeadCreatedEventCustomer) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *LeadCreatedEventCustomer) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *LeadCreatedEventCustomer) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

type LeadCreatedEventClick struct {
	ID         string  `json:"id"`
	Timestamp  string  `json:"timestamp"`
	URL        string  `json:"url"`
	Country    string  `json:"country"`
	City       string  `json:"city"`
	Region     string  `json:"region"`
	Continent  string  `json:"continent"`
	Device     string  `json:"device"`
	Browser    string  `json:"browser"`
	Os         string  `json:"os"`
	Trigger    *string `json:"trigger,omitempty"`
	Referer    string  `json:"referer"`
	RefererURL string  `json:"refererUrl"`
	Qr         bool    `json:"qr"`
	IP         string  `json:"ip"`
}

func (l LeadCreatedEventClick) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LeadCreatedEventClick) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "timestamp", "url", "country", "city", "region", "continent", "device", "browser", "os", "referer", "refererUrl", "qr", "ip"}); err != nil {
		return err
	}
	return nil
}

func (o *LeadCreatedEventClick) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LeadCreatedEventClick) GetTimestamp() string {
	if o == nil {
		return ""
	}
	return o.Timestamp
}

func (o *LeadCreatedEventClick) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *LeadCreatedEventClick) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *LeadCreatedEventClick) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *LeadCreatedEventClick) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *LeadCreatedEventClick) GetContinent() string {
	if o == nil {
		return ""
	}
	return o.Continent
}

func (o *LeadCreatedEventClick) GetDevice() string {
	if o == nil {
		return ""
	}
	return o.Device
}

func (o *LeadCreatedEventClick) GetBrowser() string {
	if o == nil {
		return ""
	}
	return o.Browser
}

func (o *LeadCreatedEventClick) GetOs() string {
	if o == nil {
		return ""
	}
	return o.Os
}

func (o *LeadCreatedEventClick) GetTrigger() *string {
	if o == nil {
		return nil
	}
	return o.Trigger
}

func (o *LeadCreatedEventClick) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *LeadCreatedEventClick) GetRefererURL() string {
	if o == nil {
		return ""
	}
	return o.RefererURL
}

func (o *LeadCreatedEventClick) GetQr() bool {
	if o == nil {
		return false
	}
	return o.Qr
}

func (o *LeadCreatedEventClick) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

type LeadCreatedEventTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (l LeadCreatedEventTestVariants) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LeadCreatedEventTestVariants) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"url", "percentage"}); err != nil {
		return err
	}
	return nil
}

func (o *LeadCreatedEventTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *LeadCreatedEventTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

type LeadCreatedEventLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key             string `json:"key"`
	URL             string `json:"url"`
	TrackConversion bool   `json:"trackConversion"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
	// The ID of the partner the short link is associated with.
	PartnerID  *string `json:"partnerId"`
	Archived   bool    `json:"archived"`
	ExpiresAt  string  `json:"expiresAt"`
	ExpiredURL *string `json:"expiredUrl"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password"`
	Proxy    bool    `json:"proxy"`
	// The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Title *string `json:"title"`
	// The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Description *string `json:"description"`
	// The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Image *string `json:"image"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video   *string `json:"video"`
	Rewrite bool    `json:"rewrite"`
	DoIndex bool    `json:"doIndex"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android"`
	// Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
	Geo         map[string]string `json:"geo"`
	PublicStats bool              `json:"publicStats"`
	// The tags assigned to the short link.
	Tags []TagSchema `json:"tags"`
	// The unique ID of the folder assigned to the short link.
	FolderID *string `json:"folderId"`
	// The IDs of the webhooks that the short link is associated with.
	WebhookIds []string `json:"webhookIds"`
	// The comments for the short link.
	Comments *string `json:"comments"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
	QrCode string `json:"qrCode"`
	// The UTM source of the short link.
	UtmSource *string `json:"utm_source"`
	// The UTM medium of the short link.
	UtmMedium *string `json:"utm_medium"`
	// The UTM campaign of the short link.
	UtmCampaign *string `json:"utm_campaign"`
	// The UTM term of the short link.
	UtmTerm *string `json:"utm_term"`
	// The UTM content of the short link.
	UtmContent *string `json:"utm_content"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants    []LeadCreatedEventTestVariants `json:"testVariants,omitempty"`
	TestStartedAt   *string                        `json:"testStartedAt"`
	TestCompletedAt *string                        `json:"testCompletedAt"`
	UserID          *string                        `json:"userId"`
	// The workspace ID of the short link.
	WorkspaceID string `json:"workspaceId"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short link has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of leads that converted to paying customers.
	Conversions *float64 `default:"0" json:"conversions"`
	// The total number of sales (includes recurring sales) generated by the short link.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar value of sales (in cents) generated by the short link.
	SaleAmount  *float64 `default:"0" json:"saleAmount"`
	LastClicked string   `json:"lastClicked"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
	// Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TagID *string `json:"tagId"`
	// Deprecated: Use `workspaceId` instead. The project ID of the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID string `json:"projectId"`
}

func (l LeadCreatedEventLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LeadCreatedEventLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "domain", "key", "url", "trackConversion", "externalId", "tenantId", "programId", "partnerId", "archived", "expiresAt", "expiredUrl", "password", "proxy", "title", "description", "image", "video", "rewrite", "doIndex", "ios", "android", "geo", "publicStats", "tags", "folderId", "webhookIds", "comments", "shortLink", "qrCode", "utm_source", "utm_medium", "utm_campaign", "utm_term", "utm_content", "testStartedAt", "testCompletedAt", "userId", "workspaceId", "lastClicked", "createdAt", "updatedAt", "tagId", "projectId"}); err != nil {
		return err
	}
	return nil
}

func (o *LeadCreatedEventLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LeadCreatedEventLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *LeadCreatedEventLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *LeadCreatedEventLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *LeadCreatedEventLink) GetTrackConversion() bool {
	if o == nil {
		return false
	}
	return o.TrackConversion
}

func (o *LeadCreatedEventLink) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *LeadCreatedEventLink) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *LeadCreatedEventLink) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *LeadCreatedEventLink) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *LeadCreatedEventLink) GetArchived() bool {
	if o == nil {
		return false
	}
	return o.Archived
}

func (o *LeadCreatedEventLink) GetExpiresAt() string {
	if o == nil {
		return ""
	}
	return o.ExpiresAt
}

func (o *LeadCreatedEventLink) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *LeadCreatedEventLink) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LeadCreatedEventLink) GetProxy() bool {
	if o == nil {
		return false
	}
	return o.Proxy
}

func (o *LeadCreatedEventLink) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *LeadCreatedEventLink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LeadCreatedEventLink) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *LeadCreatedEventLink) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *LeadCreatedEventLink) GetRewrite() bool {
	if o == nil {
		return false
	}
	return o.Rewrite
}

func (o *LeadCreatedEventLink) GetDoIndex() bool {
	if o == nil {
		return false
	}
	return o.DoIndex
}

func (o *LeadCreatedEventLink) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *LeadCreatedEventLink) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *LeadCreatedEventLink) GetGeo() map[string]string {
	if o == nil {
		return nil
	}
	return o.Geo
}

func (o *LeadCreatedEventLink) GetPublicStats() bool {
	if o == nil {
		return false
	}
	return o.PublicStats
}

func (o *LeadCreatedEventLink) GetTags() []TagSchema {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *LeadCreatedEventLink) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *LeadCreatedEventLink) GetWebhookIds() []string {
	if o == nil {
		return []string{}
	}
	return o.WebhookIds
}

func (o *LeadCreatedEventLink) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *LeadCreatedEventLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *LeadCreatedEventLink) GetQrCode() string {
	if o == nil {
		return ""
	}
	return o.QrCode
}

func (o *LeadCreatedEventLink) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *LeadCreatedEventLink) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *LeadCreatedEventLink) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *LeadCreatedEventLink) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *LeadCreatedEventLink) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *LeadCreatedEventLink) GetTestVariants() []LeadCreatedEventTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *LeadCreatedEventLink) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *LeadCreatedEventLink) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

func (o *LeadCreatedEventLink) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *LeadCreatedEventLink) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

func (o *LeadCreatedEventLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *LeadCreatedEventLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *LeadCreatedEventLink) GetConversions() *float64 {
	if o == nil {
		return nil
	}
	return o.Conversions
}

func (o *LeadCreatedEventLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *LeadCreatedEventLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *LeadCreatedEventLink) GetLastClicked() string {
	if o == nil {
		return ""
	}
	return o.LastClicked
}

func (o *LeadCreatedEventLink) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *LeadCreatedEventLink) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *LeadCreatedEventLink) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *LeadCreatedEventLink) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type LeadCreatedEventData struct {
	EventName string                   `json:"eventName"`
	Customer  LeadCreatedEventCustomer `json:"customer"`
	Click     LeadCreatedEventClick    `json:"click"`
	Link      LeadCreatedEventLink     `json:"link"`
}

func (l LeadCreatedEventData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LeadCreatedEventData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"eventName", "customer", "click", "link"}); err != nil {
		return err
	}
	return nil
}

func (o *LeadCreatedEventData) GetEventName() string {
	if o == nil {
		return ""
	}
	return o.EventName
}

func (o *LeadCreatedEventData) GetCustomer() LeadCreatedEventCustomer {
	if o == nil {
		return LeadCreatedEventCustomer{}
	}
	return o.Customer
}

func (o *LeadCreatedEventData) GetClick() LeadCreatedEventClick {
	if o == nil {
		return LeadCreatedEventClick{}
	}
	return o.Click
}

func (o *LeadCreatedEventData) GetLink() LeadCreatedEventLink {
	if o == nil {
		return LeadCreatedEventLink{}
	}
	return o.Link
}

// LeadCreatedEvent - Triggered when a lead is created.
type LeadCreatedEvent struct {
	ID        string                `json:"id"`
	Event     LeadCreatedEventEvent `json:"event"`
	CreatedAt string                `json:"createdAt"`
	Data      LeadCreatedEventData  `json:"data"`
}

func (l LeadCreatedEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LeadCreatedEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "event", "createdAt", "data"}); err != nil {
		return err
	}
	return nil
}

func (o *LeadCreatedEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LeadCreatedEvent) GetEvent() LeadCreatedEventEvent {
	if o == nil {
		return LeadCreatedEventEvent("")
	}
	return o.Event
}

func (o *LeadCreatedEvent) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *LeadCreatedEvent) GetData() LeadCreatedEventData {
	if o == nil {
		return LeadCreatedEventData{}
	}
	return o.Data
}
