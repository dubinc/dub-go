// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type SaleEventEvent string

const (
	SaleEventEventSale SaleEventEvent = "sale"
)

func (e SaleEventEvent) ToPointer() *SaleEventEvent {
	return &e
}
func (e *SaleEventEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sale":
		*e = SaleEventEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaleEventEvent: %v", v)
	}
}

// PaymentProcessor - The payment processor via which the sale was made.
type PaymentProcessor string

const (
	PaymentProcessorStripe     PaymentProcessor = "stripe"
	PaymentProcessorShopify    PaymentProcessor = "shopify"
	PaymentProcessorPolar      PaymentProcessor = "polar"
	PaymentProcessorPaddle     PaymentProcessor = "paddle"
	PaymentProcessorRevenuecat PaymentProcessor = "revenuecat"
	PaymentProcessorCustom     PaymentProcessor = "custom"
)

func (e PaymentProcessor) ToPointer() *PaymentProcessor {
	return &e
}
func (e *PaymentProcessor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		fallthrough
	case "shopify":
		fallthrough
	case "polar":
		fallthrough
	case "paddle":
		fallthrough
	case "revenuecat":
		fallthrough
	case "custom":
		*e = PaymentProcessor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentProcessor: %v", v)
	}
}

type Sale struct {
	// The amount of the sale in cents (for all two-decimal currencies). If the sale is in a zero-decimal currency, pass the full integer value (e.g. `1437` JPY). Learn more: https://d.to/currency
	Amount int64 `json:"amount"`
	// The invoice ID of the sale. Can be used as a idempotency key â€“ only one sale event can be recorded for a given invoice ID.
	InvoiceID *string `default:"null" json:"invoiceId"`
	// The payment processor via which the sale was made.
	PaymentProcessor *PaymentProcessor `default:"custom" json:"paymentProcessor"`
}

func (s Sale) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Sale) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"amount"}); err != nil {
		return err
	}
	return nil
}

func (s *Sale) GetAmount() int64 {
	if s == nil {
		return 0
	}
	return s.Amount
}

func (s *Sale) GetInvoiceID() *string {
	if s == nil {
		return nil
	}
	return s.InvoiceID
}

func (s *Sale) GetPaymentProcessor() *PaymentProcessor {
	if s == nil {
		return nil
	}
	return s.PaymentProcessor
}

type SaleEventTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (s SaleEventTestVariants) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaleEventTestVariants) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"url", "percentage"}); err != nil {
		return err
	}
	return nil
}

func (s *SaleEventTestVariants) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *SaleEventTestVariants) GetPercentage() float64 {
	if s == nil {
		return 0.0
	}
	return s.Percentage
}

type SaleEventLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key             string `json:"key"`
	URL             string `json:"url"`
	TrackConversion bool   `json:"trackConversion"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
	// The ID of the partner the short link is associated with.
	PartnerID  *string `json:"partnerId"`
	Archived   bool    `json:"archived"`
	ExpiresAt  string  `json:"expiresAt"`
	ExpiredURL *string `json:"expiredUrl"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password"`
	Proxy    bool    `json:"proxy"`
	// The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Title *string `json:"title"`
	// The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Description *string `json:"description"`
	// The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Image *string `json:"image"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video   *string `json:"video"`
	Rewrite bool    `json:"rewrite"`
	DoIndex bool    `json:"doIndex"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android"`
	// Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
	Geo         map[string]string `json:"geo"`
	PublicStats bool              `json:"publicStats"`
	// The tags assigned to the short link.
	Tags []TagSchema `json:"tags"`
	// The unique ID of the folder assigned to the short link.
	FolderID *string `json:"folderId"`
	// The IDs of the webhooks that the short link is associated with.
	WebhookIds []string `json:"webhookIds"`
	// The comments for the short link.
	Comments *string `json:"comments"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
	QrCode string `json:"qrCode"`
	// The UTM source of the short link.
	UtmSource *string `json:"utm_source"`
	// The UTM medium of the short link.
	UtmMedium *string `json:"utm_medium"`
	// The UTM campaign of the short link.
	UtmCampaign *string `json:"utm_campaign"`
	// The UTM term of the short link.
	UtmTerm *string `json:"utm_term"`
	// The UTM content of the short link.
	UtmContent *string `json:"utm_content"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants    []SaleEventTestVariants `json:"testVariants,omitempty"`
	TestStartedAt   *string                 `json:"testStartedAt"`
	TestCompletedAt *string                 `json:"testCompletedAt"`
	UserID          *string                 `json:"userId"`
	// The workspace ID of the short link.
	WorkspaceID string `json:"workspaceId"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short link has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of leads that converted to paying customers.
	Conversions *float64 `default:"0" json:"conversions"`
	// The total number of sales (includes recurring sales) generated by the short link.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar value of sales (in cents) generated by the short link.
	SaleAmount  *float64 `default:"0" json:"saleAmount"`
	LastClicked string   `json:"lastClicked"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
	// Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TagID *string `json:"tagId"`
	// Deprecated: Use `workspaceId` instead. The project ID of the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID string `json:"projectId"`
}

func (s SaleEventLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaleEventLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"id", "domain", "key", "url", "trackConversion", "archived", "expiresAt", "proxy", "rewrite", "doIndex", "publicStats", "webhookIds", "shortLink", "qrCode", "workspaceId", "lastClicked", "createdAt", "updatedAt", "projectId"}); err != nil {
		return err
	}
	return nil
}

func (s *SaleEventLink) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SaleEventLink) GetDomain() string {
	if s == nil {
		return ""
	}
	return s.Domain
}

func (s *SaleEventLink) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SaleEventLink) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *SaleEventLink) GetTrackConversion() bool {
	if s == nil {
		return false
	}
	return s.TrackConversion
}

func (s *SaleEventLink) GetExternalID() *string {
	if s == nil {
		return nil
	}
	return s.ExternalID
}

func (s *SaleEventLink) GetTenantID() *string {
	if s == nil {
		return nil
	}
	return s.TenantID
}

func (s *SaleEventLink) GetProgramID() *string {
	if s == nil {
		return nil
	}
	return s.ProgramID
}

func (s *SaleEventLink) GetPartnerID() *string {
	if s == nil {
		return nil
	}
	return s.PartnerID
}

func (s *SaleEventLink) GetArchived() bool {
	if s == nil {
		return false
	}
	return s.Archived
}

func (s *SaleEventLink) GetExpiresAt() string {
	if s == nil {
		return ""
	}
	return s.ExpiresAt
}

func (s *SaleEventLink) GetExpiredURL() *string {
	if s == nil {
		return nil
	}
	return s.ExpiredURL
}

func (s *SaleEventLink) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SaleEventLink) GetProxy() bool {
	if s == nil {
		return false
	}
	return s.Proxy
}

func (s *SaleEventLink) GetTitle() *string {
	if s == nil {
		return nil
	}
	return s.Title
}

func (s *SaleEventLink) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SaleEventLink) GetImage() *string {
	if s == nil {
		return nil
	}
	return s.Image
}

func (s *SaleEventLink) GetVideo() *string {
	if s == nil {
		return nil
	}
	return s.Video
}

func (s *SaleEventLink) GetRewrite() bool {
	if s == nil {
		return false
	}
	return s.Rewrite
}

func (s *SaleEventLink) GetDoIndex() bool {
	if s == nil {
		return false
	}
	return s.DoIndex
}

func (s *SaleEventLink) GetIos() *string {
	if s == nil {
		return nil
	}
	return s.Ios
}

func (s *SaleEventLink) GetAndroid() *string {
	if s == nil {
		return nil
	}
	return s.Android
}

func (s *SaleEventLink) GetGeo() map[string]string {
	if s == nil {
		return nil
	}
	return s.Geo
}

func (s *SaleEventLink) GetPublicStats() bool {
	if s == nil {
		return false
	}
	return s.PublicStats
}

func (s *SaleEventLink) GetTags() []TagSchema {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *SaleEventLink) GetFolderID() *string {
	if s == nil {
		return nil
	}
	return s.FolderID
}

func (s *SaleEventLink) GetWebhookIds() []string {
	if s == nil {
		return []string{}
	}
	return s.WebhookIds
}

func (s *SaleEventLink) GetComments() *string {
	if s == nil {
		return nil
	}
	return s.Comments
}

func (s *SaleEventLink) GetShortLink() string {
	if s == nil {
		return ""
	}
	return s.ShortLink
}

func (s *SaleEventLink) GetQrCode() string {
	if s == nil {
		return ""
	}
	return s.QrCode
}

func (s *SaleEventLink) GetUtmSource() *string {
	if s == nil {
		return nil
	}
	return s.UtmSource
}

func (s *SaleEventLink) GetUtmMedium() *string {
	if s == nil {
		return nil
	}
	return s.UtmMedium
}

func (s *SaleEventLink) GetUtmCampaign() *string {
	if s == nil {
		return nil
	}
	return s.UtmCampaign
}

func (s *SaleEventLink) GetUtmTerm() *string {
	if s == nil {
		return nil
	}
	return s.UtmTerm
}

func (s *SaleEventLink) GetUtmContent() *string {
	if s == nil {
		return nil
	}
	return s.UtmContent
}

func (s *SaleEventLink) GetTestVariants() []SaleEventTestVariants {
	if s == nil {
		return nil
	}
	return s.TestVariants
}

func (s *SaleEventLink) GetTestStartedAt() *string {
	if s == nil {
		return nil
	}
	return s.TestStartedAt
}

func (s *SaleEventLink) GetTestCompletedAt() *string {
	if s == nil {
		return nil
	}
	return s.TestCompletedAt
}

func (s *SaleEventLink) GetUserID() *string {
	if s == nil {
		return nil
	}
	return s.UserID
}

func (s *SaleEventLink) GetWorkspaceID() string {
	if s == nil {
		return ""
	}
	return s.WorkspaceID
}

func (s *SaleEventLink) GetClicks() *float64 {
	if s == nil {
		return nil
	}
	return s.Clicks
}

func (s *SaleEventLink) GetLeads() *float64 {
	if s == nil {
		return nil
	}
	return s.Leads
}

func (s *SaleEventLink) GetConversions() *float64 {
	if s == nil {
		return nil
	}
	return s.Conversions
}

func (s *SaleEventLink) GetSales() *float64 {
	if s == nil {
		return nil
	}
	return s.Sales
}

func (s *SaleEventLink) GetSaleAmount() *float64 {
	if s == nil {
		return nil
	}
	return s.SaleAmount
}

func (s *SaleEventLink) GetLastClicked() string {
	if s == nil {
		return ""
	}
	return s.LastClicked
}

func (s *SaleEventLink) GetCreatedAt() string {
	if s == nil {
		return ""
	}
	return s.CreatedAt
}

func (s *SaleEventLink) GetUpdatedAt() string {
	if s == nil {
		return ""
	}
	return s.UpdatedAt
}

func (s *SaleEventLink) GetTagID() *string {
	if s == nil {
		return nil
	}
	return s.TagID
}

func (s *SaleEventLink) GetProjectID() string {
	if s == nil {
		return ""
	}
	return s.ProjectID
}

type SaleEventClick struct {
	ID         string  `json:"id"`
	Timestamp  string  `json:"timestamp"`
	URL        string  `json:"url"`
	Country    string  `json:"country"`
	City       string  `json:"city"`
	Region     string  `json:"region"`
	Continent  string  `json:"continent"`
	Device     string  `json:"device"`
	Browser    string  `json:"browser"`
	Os         string  `json:"os"`
	Trigger    *string `json:"trigger,omitempty"`
	Referer    string  `json:"referer"`
	RefererURL string  `json:"refererUrl"`
	Qr         bool    `json:"qr"`
	IP         string  `json:"ip"`
}

func (s SaleEventClick) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaleEventClick) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"id", "timestamp", "url", "country", "city", "region", "continent", "device", "browser", "os", "referer", "refererUrl", "qr", "ip"}); err != nil {
		return err
	}
	return nil
}

func (s *SaleEventClick) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SaleEventClick) GetTimestamp() string {
	if s == nil {
		return ""
	}
	return s.Timestamp
}

func (s *SaleEventClick) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *SaleEventClick) GetCountry() string {
	if s == nil {
		return ""
	}
	return s.Country
}

func (s *SaleEventClick) GetCity() string {
	if s == nil {
		return ""
	}
	return s.City
}

func (s *SaleEventClick) GetRegion() string {
	if s == nil {
		return ""
	}
	return s.Region
}

func (s *SaleEventClick) GetContinent() string {
	if s == nil {
		return ""
	}
	return s.Continent
}

func (s *SaleEventClick) GetDevice() string {
	if s == nil {
		return ""
	}
	return s.Device
}

func (s *SaleEventClick) GetBrowser() string {
	if s == nil {
		return ""
	}
	return s.Browser
}

func (s *SaleEventClick) GetOs() string {
	if s == nil {
		return ""
	}
	return s.Os
}

func (s *SaleEventClick) GetTrigger() *string {
	if s == nil {
		return nil
	}
	return s.Trigger
}

func (s *SaleEventClick) GetReferer() string {
	if s == nil {
		return ""
	}
	return s.Referer
}

func (s *SaleEventClick) GetRefererURL() string {
	if s == nil {
		return ""
	}
	return s.RefererURL
}

func (s *SaleEventClick) GetQr() bool {
	if s == nil {
		return false
	}
	return s.Qr
}

func (s *SaleEventClick) GetIP() string {
	if s == nil {
		return ""
	}
	return s.IP
}

type SaleEventCustomer struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// Total number of sales for the customer.
	Sales *float64 `json:"sales,omitempty"`
	// Total amount of sales for the customer.
	SaleAmount *float64 `json:"saleAmount,omitempty"`
	// The date the customer was created.
	CreatedAt string `json:"createdAt"`
}

func (s SaleEventCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaleEventCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"id", "externalId", "name", "createdAt"}); err != nil {
		return err
	}
	return nil
}

func (s *SaleEventCustomer) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SaleEventCustomer) GetExternalID() string {
	if s == nil {
		return ""
	}
	return s.ExternalID
}

func (s *SaleEventCustomer) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SaleEventCustomer) GetEmail() *string {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SaleEventCustomer) GetAvatar() *string {
	if s == nil {
		return nil
	}
	return s.Avatar
}

func (s *SaleEventCustomer) GetCountry() *string {
	if s == nil {
		return nil
	}
	return s.Country
}

func (s *SaleEventCustomer) GetSales() *float64 {
	if s == nil {
		return nil
	}
	return s.Sales
}

func (s *SaleEventCustomer) GetSaleAmount() *float64 {
	if s == nil {
		return nil
	}
	return s.SaleAmount
}

func (s *SaleEventCustomer) GetCreatedAt() string {
	if s == nil {
		return ""
	}
	return s.CreatedAt
}

type SaleEvent struct {
	Event     SaleEventEvent    `json:"event"`
	Timestamp string            `json:"timestamp"`
	EventID   string            `json:"eventId"`
	EventName string            `json:"eventName"`
	Sale      Sale              `json:"sale"`
	Metadata  any               `json:"metadata,omitempty"`
	Link      SaleEventLink     `json:"link"`
	Click     SaleEventClick    `json:"click"`
	Customer  SaleEventCustomer `json:"customer"`
	// Deprecated: Use `sale.amount` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	SaleAmount float64 `json:"saleAmount"`
	// Deprecated: Use `sale.invoiceId` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	InvoiceID string `json:"invoice_id"`
	// Deprecated: Use `sale.paymentProcessor` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	PaymentProcessor string `json:"payment_processor"`
	// Deprecated: Use `click.id` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ClickID string `json:"click_id"`
	// Deprecated: Use `link.id` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LinkID string `json:"link_id"`
	// Deprecated: Use `link.domain` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Domain string `json:"domain"`
	// Deprecated: Use `link.key` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Key string `json:"key"`
	// Deprecated: Use `click.url` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	URL string `json:"url"`
	// Deprecated: Use `click.continent` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Continent string `json:"continent"`
	// Deprecated: Use `click.country` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Country string `json:"country"`
	// Deprecated: Use `click.city` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	City string `json:"city"`
	// Deprecated: Use `click.device` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Device string `json:"device"`
	// Deprecated: Use `click.browser` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Browser string `json:"browser"`
	// Deprecated: Use `click.os` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Os string `json:"os"`
	// Deprecated: Use `click.qr` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Qr float64 `json:"qr"`
	// Deprecated: Use `click.ip` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	IP string `json:"ip"`
}

func (s SaleEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaleEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"event", "timestamp", "eventId", "eventName", "sale", "link", "click", "customer", "saleAmount", "invoice_id", "payment_processor", "click_id", "link_id", "domain", "key", "url", "continent", "country", "city", "device", "browser", "os", "qr", "ip"}); err != nil {
		return err
	}
	return nil
}

func (s *SaleEvent) GetEvent() SaleEventEvent {
	if s == nil {
		return SaleEventEvent("")
	}
	return s.Event
}

func (s *SaleEvent) GetTimestamp() string {
	if s == nil {
		return ""
	}
	return s.Timestamp
}

func (s *SaleEvent) GetEventID() string {
	if s == nil {
		return ""
	}
	return s.EventID
}

func (s *SaleEvent) GetEventName() string {
	if s == nil {
		return ""
	}
	return s.EventName
}

func (s *SaleEvent) GetSale() Sale {
	if s == nil {
		return Sale{}
	}
	return s.Sale
}

func (s *SaleEvent) GetMetadata() any {
	if s == nil {
		return nil
	}
	return s.Metadata
}

func (s *SaleEvent) GetLink() SaleEventLink {
	if s == nil {
		return SaleEventLink{}
	}
	return s.Link
}

func (s *SaleEvent) GetClick() SaleEventClick {
	if s == nil {
		return SaleEventClick{}
	}
	return s.Click
}

func (s *SaleEvent) GetCustomer() SaleEventCustomer {
	if s == nil {
		return SaleEventCustomer{}
	}
	return s.Customer
}

func (s *SaleEvent) GetSaleAmount() float64 {
	if s == nil {
		return 0.0
	}
	return s.SaleAmount
}

func (s *SaleEvent) GetInvoiceID() string {
	if s == nil {
		return ""
	}
	return s.InvoiceID
}

func (s *SaleEvent) GetPaymentProcessor() string {
	if s == nil {
		return ""
	}
	return s.PaymentProcessor
}

func (s *SaleEvent) GetClickID() string {
	if s == nil {
		return ""
	}
	return s.ClickID
}

func (s *SaleEvent) GetLinkID() string {
	if s == nil {
		return ""
	}
	return s.LinkID
}

func (s *SaleEvent) GetDomain() string {
	if s == nil {
		return ""
	}
	return s.Domain
}

func (s *SaleEvent) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SaleEvent) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *SaleEvent) GetContinent() string {
	if s == nil {
		return ""
	}
	return s.Continent
}

func (s *SaleEvent) GetCountry() string {
	if s == nil {
		return ""
	}
	return s.Country
}

func (s *SaleEvent) GetCity() string {
	if s == nil {
		return ""
	}
	return s.City
}

func (s *SaleEvent) GetDevice() string {
	if s == nil {
		return ""
	}
	return s.Device
}

func (s *SaleEvent) GetBrowser() string {
	if s == nil {
		return ""
	}
	return s.Browser
}

func (s *SaleEvent) GetOs() string {
	if s == nil {
		return ""
	}
	return s.Os
}

func (s *SaleEvent) GetQr() float64 {
	if s == nil {
		return 0.0
	}
	return s.Qr
}

func (s *SaleEvent) GetIP() string {
	if s == nil {
		return ""
	}
	return s.IP
}
