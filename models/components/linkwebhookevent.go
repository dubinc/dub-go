// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type Three string

const (
	ThreeLinkDeleted Three = "link.deleted"
)

func (e Three) ToPointer() *Three {
	return &e
}
func (e *Three) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link.deleted":
		*e = Three(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Three: %v", v)
	}
}

type Two string

const (
	TwoLinkUpdated Two = "link.updated"
)

func (e Two) ToPointer() *Two {
	return &e
}
func (e *Two) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link.updated":
		*e = Two(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Two: %v", v)
	}
}

type One string

const (
	OneLinkCreated One = "link.created"
)

func (e One) ToPointer() *One {
	return &e
}
func (e *One) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link.created":
		*e = One(v)
		return nil
	default:
		return fmt.Errorf("invalid value for One: %v", v)
	}
}

type LinkWebhookEventEventType string

const (
	LinkWebhookEventEventTypeOne   LinkWebhookEventEventType = "1"
	LinkWebhookEventEventTypeTwo   LinkWebhookEventEventType = "2"
	LinkWebhookEventEventTypeThree LinkWebhookEventEventType = "3"
)

type LinkWebhookEventEvent struct {
	One   *One   `queryParam:"inline,name=event"`
	Two   *Two   `queryParam:"inline,name=event"`
	Three *Three `queryParam:"inline,name=event"`

	Type LinkWebhookEventEventType
}

func CreateLinkWebhookEventEventOne(one One) LinkWebhookEventEvent {
	typ := LinkWebhookEventEventTypeOne

	return LinkWebhookEventEvent{
		One:  &one,
		Type: typ,
	}
}

func CreateLinkWebhookEventEventTwo(two Two) LinkWebhookEventEvent {
	typ := LinkWebhookEventEventTypeTwo

	return LinkWebhookEventEvent{
		Two:  &two,
		Type: typ,
	}
}

func CreateLinkWebhookEventEventThree(three Three) LinkWebhookEventEvent {
	typ := LinkWebhookEventEventTypeThree

	return LinkWebhookEventEvent{
		Three: &three,
		Type:  typ,
	}
}

func (u *LinkWebhookEventEvent) UnmarshalJSON(data []byte) error {

	var one One = One("")
	if err := utils.UnmarshalJSON(data, &one, "", true, nil); err == nil {
		u.One = &one
		u.Type = LinkWebhookEventEventTypeOne
		return nil
	}

	var two Two = Two("")
	if err := utils.UnmarshalJSON(data, &two, "", true, nil); err == nil {
		u.Two = &two
		u.Type = LinkWebhookEventEventTypeTwo
		return nil
	}

	var three Three = Three("")
	if err := utils.UnmarshalJSON(data, &three, "", true, nil); err == nil {
		u.Three = &three
		u.Type = LinkWebhookEventEventTypeThree
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for LinkWebhookEventEvent", string(data))
}

func (u LinkWebhookEventEvent) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	return nil, errors.New("could not marshal union type LinkWebhookEventEvent: all fields are null")
}

type LinkWebhookEventTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (l LinkWebhookEventTestVariants) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkWebhookEventTestVariants) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"url", "percentage"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkWebhookEventTestVariants) GetURL() string {
	if l == nil {
		return ""
	}
	return l.URL
}

func (l *LinkWebhookEventTestVariants) GetPercentage() float64 {
	if l == nil {
		return 0.0
	}
	return l.Percentage
}

type LinkWebhookEventLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key             string `json:"key"`
	URL             string `json:"url"`
	TrackConversion bool   `json:"trackConversion"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
	// The ID of the partner the short link is associated with.
	PartnerID  *string `json:"partnerId"`
	Archived   bool    `json:"archived"`
	ExpiresAt  string  `json:"expiresAt"`
	ExpiredURL *string `json:"expiredUrl"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password"`
	Proxy    bool    `json:"proxy"`
	// The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Title *string `json:"title"`
	// The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Description *string `json:"description"`
	// The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Image *string `json:"image"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video   *string `json:"video"`
	Rewrite bool    `json:"rewrite"`
	DoIndex bool    `json:"doIndex"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android"`
	// Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
	Geo         map[string]string `json:"geo"`
	PublicStats bool              `json:"publicStats"`
	// The tags assigned to the short link.
	Tags []TagSchema `json:"tags"`
	// The unique ID of the folder assigned to the short link.
	FolderID *string `json:"folderId"`
	// The IDs of the webhooks that the short link is associated with.
	WebhookIds []string `json:"webhookIds"`
	// The comments for the short link.
	Comments *string `json:"comments"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
	QrCode string `json:"qrCode"`
	// The UTM source of the short link.
	UtmSource *string `json:"utm_source"`
	// The UTM medium of the short link.
	UtmMedium *string `json:"utm_medium"`
	// The UTM campaign of the short link.
	UtmCampaign *string `json:"utm_campaign"`
	// The UTM term of the short link.
	UtmTerm *string `json:"utm_term"`
	// The UTM content of the short link.
	UtmContent *string `json:"utm_content"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants    []LinkWebhookEventTestVariants `json:"testVariants,omitempty"`
	TestStartedAt   *string                        `json:"testStartedAt"`
	TestCompletedAt *string                        `json:"testCompletedAt"`
	UserID          *string                        `json:"userId"`
	// The workspace ID of the short link.
	WorkspaceID string `json:"workspaceId"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short link has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of leads that converted to paying customers.
	Conversions *float64 `default:"0" json:"conversions"`
	// The total number of sales (includes recurring sales) generated by the short link.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar value of sales (in cents) generated by the short link.
	SaleAmount  *float64 `default:"0" json:"saleAmount"`
	LastClicked string   `json:"lastClicked"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
	// Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TagID *string `json:"tagId"`
	// Deprecated: Use `workspaceId` instead. The project ID of the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID string `json:"projectId"`
}

func (l LinkWebhookEventLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkWebhookEventLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "domain", "key", "url", "trackConversion", "externalId", "tenantId", "programId", "partnerId", "archived", "expiresAt", "expiredUrl", "password", "proxy", "title", "description", "image", "video", "rewrite", "doIndex", "ios", "android", "geo", "publicStats", "tags", "folderId", "webhookIds", "comments", "shortLink", "qrCode", "utm_source", "utm_medium", "utm_campaign", "utm_term", "utm_content", "testStartedAt", "testCompletedAt", "userId", "workspaceId", "lastClicked", "createdAt", "updatedAt", "tagId", "projectId"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkWebhookEventLink) GetID() string {
	if l == nil {
		return ""
	}
	return l.ID
}

func (l *LinkWebhookEventLink) GetDomain() string {
	if l == nil {
		return ""
	}
	return l.Domain
}

func (l *LinkWebhookEventLink) GetKey() string {
	if l == nil {
		return ""
	}
	return l.Key
}

func (l *LinkWebhookEventLink) GetURL() string {
	if l == nil {
		return ""
	}
	return l.URL
}

func (l *LinkWebhookEventLink) GetTrackConversion() bool {
	if l == nil {
		return false
	}
	return l.TrackConversion
}

func (l *LinkWebhookEventLink) GetExternalID() *string {
	if l == nil {
		return nil
	}
	return l.ExternalID
}

func (l *LinkWebhookEventLink) GetTenantID() *string {
	if l == nil {
		return nil
	}
	return l.TenantID
}

func (l *LinkWebhookEventLink) GetProgramID() *string {
	if l == nil {
		return nil
	}
	return l.ProgramID
}

func (l *LinkWebhookEventLink) GetPartnerID() *string {
	if l == nil {
		return nil
	}
	return l.PartnerID
}

func (l *LinkWebhookEventLink) GetArchived() bool {
	if l == nil {
		return false
	}
	return l.Archived
}

func (l *LinkWebhookEventLink) GetExpiresAt() string {
	if l == nil {
		return ""
	}
	return l.ExpiresAt
}

func (l *LinkWebhookEventLink) GetExpiredURL() *string {
	if l == nil {
		return nil
	}
	return l.ExpiredURL
}

func (l *LinkWebhookEventLink) GetPassword() *string {
	if l == nil {
		return nil
	}
	return l.Password
}

func (l *LinkWebhookEventLink) GetProxy() bool {
	if l == nil {
		return false
	}
	return l.Proxy
}

func (l *LinkWebhookEventLink) GetTitle() *string {
	if l == nil {
		return nil
	}
	return l.Title
}

func (l *LinkWebhookEventLink) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LinkWebhookEventLink) GetImage() *string {
	if l == nil {
		return nil
	}
	return l.Image
}

func (l *LinkWebhookEventLink) GetVideo() *string {
	if l == nil {
		return nil
	}
	return l.Video
}

func (l *LinkWebhookEventLink) GetRewrite() bool {
	if l == nil {
		return false
	}
	return l.Rewrite
}

func (l *LinkWebhookEventLink) GetDoIndex() bool {
	if l == nil {
		return false
	}
	return l.DoIndex
}

func (l *LinkWebhookEventLink) GetIos() *string {
	if l == nil {
		return nil
	}
	return l.Ios
}

func (l *LinkWebhookEventLink) GetAndroid() *string {
	if l == nil {
		return nil
	}
	return l.Android
}

func (l *LinkWebhookEventLink) GetGeo() map[string]string {
	if l == nil {
		return nil
	}
	return l.Geo
}

func (l *LinkWebhookEventLink) GetPublicStats() bool {
	if l == nil {
		return false
	}
	return l.PublicStats
}

func (l *LinkWebhookEventLink) GetTags() []TagSchema {
	if l == nil {
		return nil
	}
	return l.Tags
}

func (l *LinkWebhookEventLink) GetFolderID() *string {
	if l == nil {
		return nil
	}
	return l.FolderID
}

func (l *LinkWebhookEventLink) GetWebhookIds() []string {
	if l == nil {
		return []string{}
	}
	return l.WebhookIds
}

func (l *LinkWebhookEventLink) GetComments() *string {
	if l == nil {
		return nil
	}
	return l.Comments
}

func (l *LinkWebhookEventLink) GetShortLink() string {
	if l == nil {
		return ""
	}
	return l.ShortLink
}

func (l *LinkWebhookEventLink) GetQrCode() string {
	if l == nil {
		return ""
	}
	return l.QrCode
}

func (l *LinkWebhookEventLink) GetUtmSource() *string {
	if l == nil {
		return nil
	}
	return l.UtmSource
}

func (l *LinkWebhookEventLink) GetUtmMedium() *string {
	if l == nil {
		return nil
	}
	return l.UtmMedium
}

func (l *LinkWebhookEventLink) GetUtmCampaign() *string {
	if l == nil {
		return nil
	}
	return l.UtmCampaign
}

func (l *LinkWebhookEventLink) GetUtmTerm() *string {
	if l == nil {
		return nil
	}
	return l.UtmTerm
}

func (l *LinkWebhookEventLink) GetUtmContent() *string {
	if l == nil {
		return nil
	}
	return l.UtmContent
}

func (l *LinkWebhookEventLink) GetTestVariants() []LinkWebhookEventTestVariants {
	if l == nil {
		return nil
	}
	return l.TestVariants
}

func (l *LinkWebhookEventLink) GetTestStartedAt() *string {
	if l == nil {
		return nil
	}
	return l.TestStartedAt
}

func (l *LinkWebhookEventLink) GetTestCompletedAt() *string {
	if l == nil {
		return nil
	}
	return l.TestCompletedAt
}

func (l *LinkWebhookEventLink) GetUserID() *string {
	if l == nil {
		return nil
	}
	return l.UserID
}

func (l *LinkWebhookEventLink) GetWorkspaceID() string {
	if l == nil {
		return ""
	}
	return l.WorkspaceID
}

func (l *LinkWebhookEventLink) GetClicks() *float64 {
	if l == nil {
		return nil
	}
	return l.Clicks
}

func (l *LinkWebhookEventLink) GetLeads() *float64 {
	if l == nil {
		return nil
	}
	return l.Leads
}

func (l *LinkWebhookEventLink) GetConversions() *float64 {
	if l == nil {
		return nil
	}
	return l.Conversions
}

func (l *LinkWebhookEventLink) GetSales() *float64 {
	if l == nil {
		return nil
	}
	return l.Sales
}

func (l *LinkWebhookEventLink) GetSaleAmount() *float64 {
	if l == nil {
		return nil
	}
	return l.SaleAmount
}

func (l *LinkWebhookEventLink) GetLastClicked() string {
	if l == nil {
		return ""
	}
	return l.LastClicked
}

func (l *LinkWebhookEventLink) GetCreatedAt() string {
	if l == nil {
		return ""
	}
	return l.CreatedAt
}

func (l *LinkWebhookEventLink) GetUpdatedAt() string {
	if l == nil {
		return ""
	}
	return l.UpdatedAt
}

func (l *LinkWebhookEventLink) GetTagID() *string {
	if l == nil {
		return nil
	}
	return l.TagID
}

func (l *LinkWebhookEventLink) GetProjectID() string {
	if l == nil {
		return ""
	}
	return l.ProjectID
}

// LinkWebhookEvent - Triggered when a link is created, updated, or deleted.
type LinkWebhookEvent struct {
	ID        string                `json:"id"`
	Event     LinkWebhookEventEvent `json:"event"`
	CreatedAt string                `json:"createdAt"`
	Data      LinkWebhookEventLink  `json:"data"`
}

func (l LinkWebhookEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkWebhookEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "event", "createdAt", "data"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkWebhookEvent) GetID() string {
	if l == nil {
		return ""
	}
	return l.ID
}

func (l *LinkWebhookEvent) GetEvent() LinkWebhookEventEvent {
	if l == nil {
		return LinkWebhookEventEvent{}
	}
	return l.Event
}

func (l *LinkWebhookEvent) GetCreatedAt() string {
	if l == nil {
		return ""
	}
	return l.CreatedAt
}

func (l *LinkWebhookEvent) GetData() LinkWebhookEventLink {
	if l == nil {
		return LinkWebhookEventLink{}
	}
	return l.Data
}
