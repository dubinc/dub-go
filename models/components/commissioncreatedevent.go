// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type CommissionCreatedEventEvent string

const (
	CommissionCreatedEventEventCommissionCreated CommissionCreatedEventEvent = "commission.created"
)

func (e CommissionCreatedEventEvent) ToPointer() *CommissionCreatedEventEvent {
	return &e
}
func (e *CommissionCreatedEventEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "commission.created":
		*e = CommissionCreatedEventEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommissionCreatedEventEvent: %v", v)
	}
}

type CommissionCreatedEventType string

const (
	CommissionCreatedEventTypeClick  CommissionCreatedEventType = "click"
	CommissionCreatedEventTypeLead   CommissionCreatedEventType = "lead"
	CommissionCreatedEventTypeSale   CommissionCreatedEventType = "sale"
	CommissionCreatedEventTypeCustom CommissionCreatedEventType = "custom"
)

func (e CommissionCreatedEventType) ToPointer() *CommissionCreatedEventType {
	return &e
}
func (e *CommissionCreatedEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		fallthrough
	case "custom":
		*e = CommissionCreatedEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommissionCreatedEventType: %v", v)
	}
}

type CommissionCreatedEventStatus string

const (
	CommissionCreatedEventStatusPending   CommissionCreatedEventStatus = "pending"
	CommissionCreatedEventStatusProcessed CommissionCreatedEventStatus = "processed"
	CommissionCreatedEventStatusPaid      CommissionCreatedEventStatus = "paid"
	CommissionCreatedEventStatusRefunded  CommissionCreatedEventStatus = "refunded"
	CommissionCreatedEventStatusDuplicate CommissionCreatedEventStatus = "duplicate"
	CommissionCreatedEventStatusFraud     CommissionCreatedEventStatus = "fraud"
	CommissionCreatedEventStatusCanceled  CommissionCreatedEventStatus = "canceled"
)

func (e CommissionCreatedEventStatus) ToPointer() *CommissionCreatedEventStatus {
	return &e
}
func (e *CommissionCreatedEventStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = CommissionCreatedEventStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommissionCreatedEventStatus: %v", v)
	}
}

type Partner struct {
	// The partner's unique ID on Dub.
	ID string `json:"id"`
	// The partner's full legal name.
	Name string `json:"name"`
	// The partner's email address. Should be a unique value across Dub.
	Email *string `json:"email"`
	// The partner's avatar image.
	Image *string `json:"image"`
	// The date when the partner enabled payouts.
	PayoutsEnabledAt *string `json:"payoutsEnabledAt"`
	// The partner's country (required for tax purposes).
	Country          *string `json:"country"`
	TotalClicks      float64 `json:"totalClicks"`
	TotalLeads       float64 `json:"totalLeads"`
	TotalConversions float64 `json:"totalConversions"`
	TotalSales       float64 `json:"totalSales"`
	TotalSaleAmount  float64 `json:"totalSaleAmount"`
	TotalCommissions float64 `json:"totalCommissions"`
}

func (p Partner) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Partner) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"id", "name", "email", "image", "payoutsEnabledAt", "country", "totalClicks", "totalLeads", "totalConversions", "totalSales", "totalSaleAmount", "totalCommissions"}); err != nil {
		return err
	}
	return nil
}

func (o *Partner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Partner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Partner) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Partner) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *Partner) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *Partner) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *Partner) GetTotalClicks() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalClicks
}

func (o *Partner) GetTotalLeads() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalLeads
}

func (o *Partner) GetTotalConversions() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalConversions
}

func (o *Partner) GetTotalSales() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalSales
}

func (o *Partner) GetTotalSaleAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalSaleAmount
}

func (o *Partner) GetTotalCommissions() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalCommissions
}

type CommissionCreatedEventCustomer struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// Total number of sales for the customer.
	Sales *float64 `json:"sales,omitempty"`
	// Total amount of sales for the customer.
	SaleAmount *float64 `json:"saleAmount,omitempty"`
	// The date the customer was created.
	CreatedAt string `json:"createdAt"`
}

func (c CommissionCreatedEventCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommissionCreatedEventCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "externalId", "name", "createdAt"}); err != nil {
		return err
	}
	return nil
}

func (o *CommissionCreatedEventCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CommissionCreatedEventCustomer) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *CommissionCreatedEventCustomer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CommissionCreatedEventCustomer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CommissionCreatedEventCustomer) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CommissionCreatedEventCustomer) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CommissionCreatedEventCustomer) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CommissionCreatedEventCustomer) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *CommissionCreatedEventCustomer) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

type CommissionCreatedEventData struct {
	// The commission's unique ID on Dub.
	ID          string                       `json:"id"`
	Type        *CommissionCreatedEventType  `json:"type,omitempty"`
	Amount      float64                      `json:"amount"`
	Earnings    float64                      `json:"earnings"`
	Currency    string                       `json:"currency"`
	Status      CommissionCreatedEventStatus `json:"status"`
	InvoiceID   *string                      `json:"invoiceId"`
	Description *string                      `json:"description"`
	Quantity    float64                      `json:"quantity"`
	// The user who created the manual commission.
	UserID    *string                         `json:"userId,omitempty"`
	CreatedAt string                          `json:"createdAt"`
	UpdatedAt string                          `json:"updatedAt"`
	Partner   Partner                         `json:"partner"`
	Customer  *CommissionCreatedEventCustomer `json:"customer,omitempty"`
}

func (c CommissionCreatedEventData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommissionCreatedEventData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "amount", "earnings", "currency", "status", "invoiceId", "description", "quantity", "createdAt", "updatedAt", "partner"}); err != nil {
		return err
	}
	return nil
}

func (o *CommissionCreatedEventData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CommissionCreatedEventData) GetType() *CommissionCreatedEventType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CommissionCreatedEventData) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *CommissionCreatedEventData) GetEarnings() float64 {
	if o == nil {
		return 0.0
	}
	return o.Earnings
}

func (o *CommissionCreatedEventData) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CommissionCreatedEventData) GetStatus() CommissionCreatedEventStatus {
	if o == nil {
		return CommissionCreatedEventStatus("")
	}
	return o.Status
}

func (o *CommissionCreatedEventData) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *CommissionCreatedEventData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CommissionCreatedEventData) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *CommissionCreatedEventData) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *CommissionCreatedEventData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CommissionCreatedEventData) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *CommissionCreatedEventData) GetPartner() Partner {
	if o == nil {
		return Partner{}
	}
	return o.Partner
}

func (o *CommissionCreatedEventData) GetCustomer() *CommissionCreatedEventCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

// CommissionCreatedEvent - Triggered when a commission is created for a partner.
type CommissionCreatedEvent struct {
	ID        string                      `json:"id"`
	Event     CommissionCreatedEventEvent `json:"event"`
	CreatedAt string                      `json:"createdAt"`
	Data      CommissionCreatedEventData  `json:"data"`
}

func (c CommissionCreatedEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommissionCreatedEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "event", "createdAt", "data"}); err != nil {
		return err
	}
	return nil
}

func (o *CommissionCreatedEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CommissionCreatedEvent) GetEvent() CommissionCreatedEventEvent {
	if o == nil {
		return CommissionCreatedEventEvent("")
	}
	return o.Event
}

func (o *CommissionCreatedEvent) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CommissionCreatedEvent) GetData() CommissionCreatedEventData {
	if o == nil {
		return CommissionCreatedEventData{}
	}
	return o.Data
}
