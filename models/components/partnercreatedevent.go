// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type PartnerCreatedEventEvent string

const (
	PartnerCreatedEventEventPartnerCreated PartnerCreatedEventEvent = "partner.created"
)

func (e PartnerCreatedEventEvent) ToPointer() *PartnerCreatedEventEvent {
	return &e
}
func (e *PartnerCreatedEventEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner.created":
		*e = PartnerCreatedEventEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerCreatedEventEvent: %v", v)
	}
}

type Status string

const (
	StatusApproved Status = "approved"
	StatusPending  Status = "pending"
	StatusRejected Status = "rejected"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "pending":
		fallthrough
	case "rejected":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type Links struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short links has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of sales the short links has generated.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar amount of sales the short links has generated (in cents).
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (l Links) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Links) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Links) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Links) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *Links) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Links) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *Links) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Links) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *Links) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *Links) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *Links) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

type PartnerCreatedEventData struct {
	ID               string   `json:"id"`
	Name             string   `json:"name"`
	Email            *string  `json:"email"`
	Image            *string  `json:"image"`
	Description      *string  `json:"description,omitempty"`
	Country          *string  `json:"country"`
	PayoutsEnabledAt *string  `json:"payoutsEnabledAt"`
	CreatedAt        string   `json:"createdAt"`
	Status           Status   `json:"status"`
	ProgramID        string   `json:"programId"`
	TenantID         *string  `json:"tenantId"`
	Links            []Links  `json:"links"`
	Clicks           *float64 `default:"0" json:"clicks"`
	Leads            *float64 `default:"0" json:"leads"`
	Sales            *float64 `default:"0" json:"sales"`
	SaleAmount       *float64 `default:"0" json:"saleAmount"`
	Earnings         *float64 `default:"0" json:"earnings"`
	ApplicationID    *string  `json:"applicationId,omitempty"`
}

func (p PartnerCreatedEventData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerCreatedEventData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PartnerCreatedEventData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PartnerCreatedEventData) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PartnerCreatedEventData) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *PartnerCreatedEventData) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *PartnerCreatedEventData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PartnerCreatedEventData) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *PartnerCreatedEventData) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *PartnerCreatedEventData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *PartnerCreatedEventData) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *PartnerCreatedEventData) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *PartnerCreatedEventData) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *PartnerCreatedEventData) GetLinks() []Links {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *PartnerCreatedEventData) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *PartnerCreatedEventData) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *PartnerCreatedEventData) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *PartnerCreatedEventData) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *PartnerCreatedEventData) GetEarnings() *float64 {
	if o == nil {
		return nil
	}
	return o.Earnings
}

func (o *PartnerCreatedEventData) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

// PartnerCreatedEvent - Triggered when a partner is created.
type PartnerCreatedEvent struct {
	ID        string                   `json:"id"`
	Event     PartnerCreatedEventEvent `json:"event"`
	CreatedAt string                   `json:"createdAt"`
	Data      PartnerCreatedEventData  `json:"data"`
}

func (o *PartnerCreatedEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PartnerCreatedEvent) GetEvent() PartnerCreatedEventEvent {
	if o == nil {
		return PartnerCreatedEventEvent("")
	}
	return o.Event
}

func (o *PartnerCreatedEvent) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *PartnerCreatedEvent) GetData() PartnerCreatedEventData {
	if o == nil {
		return PartnerCreatedEventData{}
	}
	return o.Data
}
