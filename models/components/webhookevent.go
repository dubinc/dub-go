// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/dubinc/dub-go/internal/utils"
)

type WebhookEventType string

const (
	WebhookEventTypeLinkWebhookEvent       WebhookEventType = "LinkWebhookEvent"
	WebhookEventTypeLinkClickedEvent       WebhookEventType = "LinkClickedEvent"
	WebhookEventTypeLeadCreatedEvent       WebhookEventType = "LeadCreatedEvent"
	WebhookEventTypeSaleCreatedEvent       WebhookEventType = "SaleCreatedEvent"
	WebhookEventTypePartnerEnrolledEvent   WebhookEventType = "PartnerEnrolledEvent"
	WebhookEventTypeCommissionCreatedEvent WebhookEventType = "CommissionCreatedEvent"
)

// WebhookEvent - Webhook event schema
type WebhookEvent struct {
	LinkWebhookEvent       *LinkWebhookEvent       `queryParam:"inline"`
	LinkClickedEvent       *LinkClickedEvent       `queryParam:"inline"`
	LeadCreatedEvent       *LeadCreatedEvent       `queryParam:"inline"`
	SaleCreatedEvent       *SaleCreatedEvent       `queryParam:"inline"`
	PartnerEnrolledEvent   *PartnerEnrolledEvent   `queryParam:"inline"`
	CommissionCreatedEvent *CommissionCreatedEvent `queryParam:"inline"`

	Type WebhookEventType
}

func CreateWebhookEventLinkWebhookEvent(linkWebhookEvent LinkWebhookEvent) WebhookEvent {
	typ := WebhookEventTypeLinkWebhookEvent

	return WebhookEvent{
		LinkWebhookEvent: &linkWebhookEvent,
		Type:             typ,
	}
}

func CreateWebhookEventLinkClickedEvent(linkClickedEvent LinkClickedEvent) WebhookEvent {
	typ := WebhookEventTypeLinkClickedEvent

	return WebhookEvent{
		LinkClickedEvent: &linkClickedEvent,
		Type:             typ,
	}
}

func CreateWebhookEventLeadCreatedEvent(leadCreatedEvent LeadCreatedEvent) WebhookEvent {
	typ := WebhookEventTypeLeadCreatedEvent

	return WebhookEvent{
		LeadCreatedEvent: &leadCreatedEvent,
		Type:             typ,
	}
}

func CreateWebhookEventSaleCreatedEvent(saleCreatedEvent SaleCreatedEvent) WebhookEvent {
	typ := WebhookEventTypeSaleCreatedEvent

	return WebhookEvent{
		SaleCreatedEvent: &saleCreatedEvent,
		Type:             typ,
	}
}

func CreateWebhookEventPartnerEnrolledEvent(partnerEnrolledEvent PartnerEnrolledEvent) WebhookEvent {
	typ := WebhookEventTypePartnerEnrolledEvent

	return WebhookEvent{
		PartnerEnrolledEvent: &partnerEnrolledEvent,
		Type:                 typ,
	}
}

func CreateWebhookEventCommissionCreatedEvent(commissionCreatedEvent CommissionCreatedEvent) WebhookEvent {
	typ := WebhookEventTypeCommissionCreatedEvent

	return WebhookEvent{
		CommissionCreatedEvent: &commissionCreatedEvent,
		Type:                   typ,
	}
}

func (u *WebhookEvent) UnmarshalJSON(data []byte) error {

	var linkWebhookEvent LinkWebhookEvent = LinkWebhookEvent{}
	if err := utils.UnmarshalJSON(data, &linkWebhookEvent, "", true, nil); err == nil {
		u.LinkWebhookEvent = &linkWebhookEvent
		u.Type = WebhookEventTypeLinkWebhookEvent
		return nil
	}

	var linkClickedEvent LinkClickedEvent = LinkClickedEvent{}
	if err := utils.UnmarshalJSON(data, &linkClickedEvent, "", true, nil); err == nil {
		u.LinkClickedEvent = &linkClickedEvent
		u.Type = WebhookEventTypeLinkClickedEvent
		return nil
	}

	var leadCreatedEvent LeadCreatedEvent = LeadCreatedEvent{}
	if err := utils.UnmarshalJSON(data, &leadCreatedEvent, "", true, nil); err == nil {
		u.LeadCreatedEvent = &leadCreatedEvent
		u.Type = WebhookEventTypeLeadCreatedEvent
		return nil
	}

	var saleCreatedEvent SaleCreatedEvent = SaleCreatedEvent{}
	if err := utils.UnmarshalJSON(data, &saleCreatedEvent, "", true, nil); err == nil {
		u.SaleCreatedEvent = &saleCreatedEvent
		u.Type = WebhookEventTypeSaleCreatedEvent
		return nil
	}

	var partnerEnrolledEvent PartnerEnrolledEvent = PartnerEnrolledEvent{}
	if err := utils.UnmarshalJSON(data, &partnerEnrolledEvent, "", true, nil); err == nil {
		u.PartnerEnrolledEvent = &partnerEnrolledEvent
		u.Type = WebhookEventTypePartnerEnrolledEvent
		return nil
	}

	var commissionCreatedEvent CommissionCreatedEvent = CommissionCreatedEvent{}
	if err := utils.UnmarshalJSON(data, &commissionCreatedEvent, "", true, nil); err == nil {
		u.CommissionCreatedEvent = &commissionCreatedEvent
		u.Type = WebhookEventTypeCommissionCreatedEvent
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WebhookEvent", string(data))
}

func (u WebhookEvent) MarshalJSON() ([]byte, error) {
	if u.LinkWebhookEvent != nil {
		return utils.MarshalJSON(u.LinkWebhookEvent, "", true)
	}

	if u.LinkClickedEvent != nil {
		return utils.MarshalJSON(u.LinkClickedEvent, "", true)
	}

	if u.LeadCreatedEvent != nil {
		return utils.MarshalJSON(u.LeadCreatedEvent, "", true)
	}

	if u.SaleCreatedEvent != nil {
		return utils.MarshalJSON(u.SaleCreatedEvent, "", true)
	}

	if u.PartnerEnrolledEvent != nil {
		return utils.MarshalJSON(u.PartnerEnrolledEvent, "", true)
	}

	if u.CommissionCreatedEvent != nil {
		return utils.MarshalJSON(u.CommissionCreatedEvent, "", true)
	}

	return nil, errors.New("could not marshal union type WebhookEvent: all fields are null")
}
