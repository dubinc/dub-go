// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/dubinc/dub-go/internal/utils"
)

type TestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (t TestVariants) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TestVariants) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"url", "percentage"}); err != nil {
		return err
	}
	return nil
}

func (t *TestVariants) GetURL() string {
	if t == nil {
		return ""
	}
	return t.URL
}

func (t *TestVariants) GetPercentage() float64 {
	if t == nil {
		return 0.0
	}
	return t.Percentage
}

type LinkSchema struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// Whether to track conversions for the short link.
	TrackConversion *bool `default:"false" json:"trackConversion"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
	// The ID of the partner the short link is associated with.
	PartnerID *string `json:"partnerId"`
	// Whether the short link is archived.
	Archived *bool `default:"false" json:"archived"`
	// The date and time when the short link will expire in ISO-8601 format.
	ExpiresAt *string `json:"expiresAt"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password"`
	// Whether the short link uses Custom Link Previews feature.
	Proxy *bool `default:"false" json:"proxy"`
	// The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Title *string `json:"title"`
	// The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Description *string `json:"description"`
	// The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
	Image *string `json:"image"`
	// The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video"`
	// Whether the short link uses link cloaking.
	Rewrite *bool `default:"false" json:"rewrite"`
	// Whether to allow search engines to index the short link.
	DoIndex *bool `default:"false" json:"doIndex"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android"`
	// Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
	Geo map[string]string `json:"geo"`
	// Whether the short link's stats are publicly accessible.
	PublicStats *bool `default:"false" json:"publicStats"`
	// The tags assigned to the short link.
	Tags []LinkTagSchema `json:"tags"`
	// The unique ID of the folder assigned to the short link.
	FolderID *string `json:"folderId"`
	// The IDs of the webhooks that the short link is associated with.
	WebhookIds []string `json:"webhookIds"`
	// The comments for the short link.
	Comments *string `json:"comments"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
	QrCode string `json:"qrCode"`
	// The UTM source of the short link.
	UtmSource *string `json:"utm_source"`
	// The UTM medium of the short link.
	UtmMedium *string `json:"utm_medium"`
	// The UTM campaign of the short link.
	UtmCampaign *string `json:"utm_campaign"`
	// The UTM term of the short link.
	UtmTerm *string `json:"utm_term"`
	// The UTM content of the short link.
	UtmContent *string `json:"utm_content"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []TestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
	// The user ID of the creator of the short link.
	UserID *string `json:"userId"`
	// The workspace ID of the short link.
	WorkspaceID string `json:"workspaceId"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short link has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of leads that converted to paying customers.
	Conversions *float64 `default:"0" json:"conversions"`
	// The total number of sales (includes recurring sales) generated by the short link.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar value of sales (in cents) generated by the short link.
	SaleAmount *float64 `default:"0" json:"saleAmount"`
	// The date and time when the short link was last clicked.
	LastClicked *string `json:"lastClicked"`
	// The date and time when the short link was created.
	CreatedAt string `json:"createdAt"`
	// The date and time when the short link was last updated.
	UpdatedAt string `json:"updatedAt"`
	// Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TagID *string `json:"tagId"`
	// Deprecated: Use `workspaceId` instead. The project ID of the short link.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID string `json:"projectId"`
}

func (l LinkSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"id", "domain", "key", "url", "webhookIds", "shortLink", "qrCode", "workspaceId", "createdAt", "updatedAt", "projectId"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkSchema) GetID() string {
	if l == nil {
		return ""
	}
	return l.ID
}

func (l *LinkSchema) GetDomain() string {
	if l == nil {
		return ""
	}
	return l.Domain
}

func (l *LinkSchema) GetKey() string {
	if l == nil {
		return ""
	}
	return l.Key
}

func (l *LinkSchema) GetURL() string {
	if l == nil {
		return ""
	}
	return l.URL
}

func (l *LinkSchema) GetTrackConversion() *bool {
	if l == nil {
		return nil
	}
	return l.TrackConversion
}

func (l *LinkSchema) GetExternalID() *string {
	if l == nil {
		return nil
	}
	return l.ExternalID
}

func (l *LinkSchema) GetTenantID() *string {
	if l == nil {
		return nil
	}
	return l.TenantID
}

func (l *LinkSchema) GetProgramID() *string {
	if l == nil {
		return nil
	}
	return l.ProgramID
}

func (l *LinkSchema) GetPartnerID() *string {
	if l == nil {
		return nil
	}
	return l.PartnerID
}

func (l *LinkSchema) GetArchived() *bool {
	if l == nil {
		return nil
	}
	return l.Archived
}

func (l *LinkSchema) GetExpiresAt() *string {
	if l == nil {
		return nil
	}
	return l.ExpiresAt
}

func (l *LinkSchema) GetExpiredURL() *string {
	if l == nil {
		return nil
	}
	return l.ExpiredURL
}

func (l *LinkSchema) GetPassword() *string {
	if l == nil {
		return nil
	}
	return l.Password
}

func (l *LinkSchema) GetProxy() *bool {
	if l == nil {
		return nil
	}
	return l.Proxy
}

func (l *LinkSchema) GetTitle() *string {
	if l == nil {
		return nil
	}
	return l.Title
}

func (l *LinkSchema) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LinkSchema) GetImage() *string {
	if l == nil {
		return nil
	}
	return l.Image
}

func (l *LinkSchema) GetVideo() *string {
	if l == nil {
		return nil
	}
	return l.Video
}

func (l *LinkSchema) GetRewrite() *bool {
	if l == nil {
		return nil
	}
	return l.Rewrite
}

func (l *LinkSchema) GetDoIndex() *bool {
	if l == nil {
		return nil
	}
	return l.DoIndex
}

func (l *LinkSchema) GetIos() *string {
	if l == nil {
		return nil
	}
	return l.Ios
}

func (l *LinkSchema) GetAndroid() *string {
	if l == nil {
		return nil
	}
	return l.Android
}

func (l *LinkSchema) GetGeo() map[string]string {
	if l == nil {
		return nil
	}
	return l.Geo
}

func (l *LinkSchema) GetPublicStats() *bool {
	if l == nil {
		return nil
	}
	return l.PublicStats
}

func (l *LinkSchema) GetTags() []LinkTagSchema {
	if l == nil {
		return nil
	}
	return l.Tags
}

func (l *LinkSchema) GetFolderID() *string {
	if l == nil {
		return nil
	}
	return l.FolderID
}

func (l *LinkSchema) GetWebhookIds() []string {
	if l == nil {
		return []string{}
	}
	return l.WebhookIds
}

func (l *LinkSchema) GetComments() *string {
	if l == nil {
		return nil
	}
	return l.Comments
}

func (l *LinkSchema) GetShortLink() string {
	if l == nil {
		return ""
	}
	return l.ShortLink
}

func (l *LinkSchema) GetQrCode() string {
	if l == nil {
		return ""
	}
	return l.QrCode
}

func (l *LinkSchema) GetUtmSource() *string {
	if l == nil {
		return nil
	}
	return l.UtmSource
}

func (l *LinkSchema) GetUtmMedium() *string {
	if l == nil {
		return nil
	}
	return l.UtmMedium
}

func (l *LinkSchema) GetUtmCampaign() *string {
	if l == nil {
		return nil
	}
	return l.UtmCampaign
}

func (l *LinkSchema) GetUtmTerm() *string {
	if l == nil {
		return nil
	}
	return l.UtmTerm
}

func (l *LinkSchema) GetUtmContent() *string {
	if l == nil {
		return nil
	}
	return l.UtmContent
}

func (l *LinkSchema) GetTestVariants() []TestVariants {
	if l == nil {
		return nil
	}
	return l.TestVariants
}

func (l *LinkSchema) GetTestStartedAt() *string {
	if l == nil {
		return nil
	}
	return l.TestStartedAt
}

func (l *LinkSchema) GetTestCompletedAt() *string {
	if l == nil {
		return nil
	}
	return l.TestCompletedAt
}

func (l *LinkSchema) GetUserID() *string {
	if l == nil {
		return nil
	}
	return l.UserID
}

func (l *LinkSchema) GetWorkspaceID() string {
	if l == nil {
		return ""
	}
	return l.WorkspaceID
}

func (l *LinkSchema) GetClicks() *float64 {
	if l == nil {
		return nil
	}
	return l.Clicks
}

func (l *LinkSchema) GetLeads() *float64 {
	if l == nil {
		return nil
	}
	return l.Leads
}

func (l *LinkSchema) GetConversions() *float64 {
	if l == nil {
		return nil
	}
	return l.Conversions
}

func (l *LinkSchema) GetSales() *float64 {
	if l == nil {
		return nil
	}
	return l.Sales
}

func (l *LinkSchema) GetSaleAmount() *float64 {
	if l == nil {
		return nil
	}
	return l.SaleAmount
}

func (l *LinkSchema) GetLastClicked() *string {
	if l == nil {
		return nil
	}
	return l.LastClicked
}

func (l *LinkSchema) GetCreatedAt() string {
	if l == nil {
		return ""
	}
	return l.CreatedAt
}

func (l *LinkSchema) GetUpdatedAt() string {
	if l == nil {
		return ""
	}
	return l.UpdatedAt
}

func (l *LinkSchema) GetTagID() *string {
	if l == nil {
		return nil
	}
	return l.TagID
}

func (l *LinkSchema) GetProjectID() string {
	if l == nil {
		return ""
	}
	return l.ProjectID
}
