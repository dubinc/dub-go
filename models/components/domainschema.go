// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/dubinc/dub-go/internal/utils"
)

// RegisteredDomain - The registered domain record.
type RegisteredDomain struct {
	// The ID of the registered domain record.
	ID string `json:"id"`
	// The date the domain auto-renew is disabled.
	AutoRenewalDisabledAt *string `json:"autoRenewalDisabledAt"`
	// The date the domain was created.
	CreatedAt string `json:"createdAt"`
	// The date the domain expires.
	ExpiresAt string `json:"expiresAt"`
	// The fee to renew the domain.
	RenewalFee float64 `json:"renewalFee"`
}

func (o *RegisteredDomain) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RegisteredDomain) GetAutoRenewalDisabledAt() *string {
	if o == nil {
		return nil
	}
	return o.AutoRenewalDisabledAt
}

func (o *RegisteredDomain) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *RegisteredDomain) GetExpiresAt() string {
	if o == nil {
		return ""
	}
	return o.ExpiresAt
}

func (o *RegisteredDomain) GetRenewalFee() float64 {
	if o == nil {
		return 0.0
	}
	return o.RenewalFee
}

type DomainSchema struct {
	// The unique identifier of the domain.
	ID string `json:"id"`
	// The domain name.
	Slug string `json:"slug"`
	// Whether the domain is verified.
	Verified *bool `default:"false" json:"verified"`
	// Whether the domain is the primary domain for the workspace.
	Primary *bool `default:"false" json:"primary"`
	// Whether the domain is archived.
	Archived *bool `default:"false" json:"archived"`
	// Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened.
	Placeholder *string `json:"placeholder"`
	// The URL to redirect to when a link under this domain has expired.
	ExpiredURL *string `json:"expiredUrl"`
	// The URL to redirect to when a link under this domain doesn't exist.
	NotFoundURL *string `json:"notFoundUrl"`
	// The logo of the domain.
	Logo *string `json:"logo"`
	// assetLinks.json configuration file (for deep link support on Android).
	AssetLinks *string `default:"null" json:"assetLinks"`
	// apple-app-site-association configuration file (for deep link support on iOS).
	AppleAppSiteAssociation *string `default:"null" json:"appleAppSiteAssociation"`
	// The date the domain was created.
	CreatedAt string `json:"createdAt"`
	// The date the domain was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The registered domain record.
	RegisteredDomain *RegisteredDomain `json:"registeredDomain"`
}

func (d DomainSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DomainSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "slug", "placeholder", "expiredUrl", "notFoundUrl", "logo", "createdAt", "updatedAt", "registeredDomain"}); err != nil {
		return err
	}
	return nil
}

func (o *DomainSchema) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DomainSchema) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *DomainSchema) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}

func (o *DomainSchema) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *DomainSchema) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *DomainSchema) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DomainSchema) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *DomainSchema) GetNotFoundURL() *string {
	if o == nil {
		return nil
	}
	return o.NotFoundURL
}

func (o *DomainSchema) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *DomainSchema) GetAssetLinks() *string {
	if o == nil {
		return nil
	}
	return o.AssetLinks
}

func (o *DomainSchema) GetAppleAppSiteAssociation() *string {
	if o == nil {
		return nil
	}
	return o.AppleAppSiteAssociation
}

func (o *DomainSchema) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DomainSchema) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *DomainSchema) GetRegisteredDomain() *RegisteredDomain {
	if o == nil {
		return nil
	}
	return o.RegisteredDomain
}
