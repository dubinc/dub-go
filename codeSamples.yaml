overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/analytics"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "retrieveAnalytics"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Analytics.Retrieve(ctx, operations.RetrieveAnalyticsRequest{\n        Event: operations.EventClicks.ToPointer(),\n        GroupBy: operations.QueryParamGroupByCount.ToPointer(),\n        Timezone: dubgo.String(\"America/New_York\"),\n        City: dubgo.String(\"New York\"),\n        Device: dubgo.String(\"Desktop\"),\n        Browser: dubgo.String(\"Chrome\"),\n        Os: dubgo.String(\"Windows\"),\n        Referer: dubgo.String(\"google.com\"),\n        RefererURL: dubgo.String(\"https://dub.co/blog\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/customers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getCustomers"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Customers.List(ctx, operations.GetCustomersRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/customers/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteCustomer"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Customers.Delete(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/customers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getCustomer"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Customers.Get(ctx, operations.GetCustomerRequest{\n        ID: \"<id>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/customers/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateCustomer"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Customers.Update(ctx, operations.UpdateCustomerRequest{\n        ID: \"<id>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/domains"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "listDomains"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Domains.List(ctx, operations.ListDomainsRequest{\n        Archived: dubgo.Bool(true),\n        Page: dubgo.Float64(1),\n        PageSize: dubgo.Float64(50),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/domains"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createDomain"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Domains.Create(ctx, &operations.CreateDomainRequestBody{\n        Slug: \"acme.com\",\n        ExpiredURL: dubgo.String(\"https://acme.com/expired\"),\n        NotFoundURL: dubgo.String(\"https://acme.com/not-found\"),\n        Archived: dubgo.Bool(false),\n        Placeholder: dubgo.String(\"https://dub.co/help/article/what-is-dub\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/domains/{slug}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteDomain"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Domains.Delete(ctx, \"acme.com\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/domains/{slug}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateDomain"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Domains.Update(ctx, \"acme.com\", &operations.UpdateDomainRequestBody{\n        Slug: dubgo.String(\"acme.com\"),\n        ExpiredURL: dubgo.String(\"https://acme.com/expired\"),\n        NotFoundURL: dubgo.String(\"https://acme.com/not-found\"),\n        Archived: dubgo.Bool(false),\n        Placeholder: dubgo.String(\"https://dub.co/help/article/what-is-dub\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/events"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "listEvents"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Events.List(ctx, operations.ListEventsRequest{\n        Event: operations.QueryParamEventClicks.ToPointer(),\n        Interval: operations.QueryParamIntervalTwentyFourh.ToPointer(),\n        Timezone: dubgo.String(\"America/New_York\"),\n        City: dubgo.String(\"New York\"),\n        Device: dubgo.String(\"Desktop\"),\n        Browser: dubgo.String(\"Chrome\"),\n        Os: dubgo.String(\"Windows\"),\n        Referer: dubgo.String(\"google.com\"),\n        RefererURL: dubgo.String(\"https://dub.co/blog\"),\n        Page: dubgo.Float64(1),\n        Limit: dubgo.Float64(100),\n        SortOrder: operations.QueryParamSortOrderDesc.ToPointer(),\n        SortBy: operations.QueryParamSortByTimestamp.ToPointer(),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getLinks"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.List(ctx, operations.GetLinksRequest{\n        ShowArchived: dubgo.Bool(true),\n        WithTags: dubgo.Bool(true),\n        SortBy: operations.SortByCreatedAt.ToPointer(),\n        SortOrder: operations.SortOrderDesc.ToPointer(),\n        Page: dubgo.Float64(1),\n        PageSize: dubgo.Float64(50),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/links"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createLink"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{\n        URL: \"https://google.com\",\n        ExternalID: dubgo.String(\"123456\"),\n        TagIds: dubgo.Pointer(operations.CreateTagIdsArrayOfStr(\n            []string{\n                \"clux0rgak00011...\",\n            },\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/bulk"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "bulkDeleteLinks"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.DeleteMany(ctx, operations.BulkDeleteLinksRequest{\n        LinkIds: []string{\n            \"clux0rgak00011...\",\n            \"clux0rgak00022...\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/bulk"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "bulkUpdateLinks"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.UpdateMany(ctx, &operations.BulkUpdateLinksRequestBody{\n        Data: operations.Data{\n            URL: dubgo.String(\"https://google.com\"),\n            TagIds: dubgo.Pointer(operations.CreateBulkUpdateLinksTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n            )),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/bulk"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "bulkCreateLinks"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.CreateMany(ctx, []operations.RequestBody{\n        operations.RequestBody{\n            URL: \"https://google.com\",\n            ExternalID: dubgo.String(\"123456\"),\n            TagIds: dubgo.Pointer(operations.CreateBulkCreateLinksTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n            )),\n        },\n        operations.RequestBody{\n            URL: \"https://google.com\",\n            ExternalID: dubgo.String(\"123456\"),\n            TagIds: dubgo.Pointer(operations.CreateBulkCreateLinksTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n            )),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/count"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getLinksCount"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.Count(ctx, operations.GetLinksCountRequest{\n        ShowArchived: dubgo.Bool(true),\n        WithTags: dubgo.Bool(true),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/info"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getLinkInfo"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.Get(ctx, operations.GetLinkInfoRequest{\n        LinkID: dubgo.String(\"clux0rgak00011...\"),\n        ExternalID: dubgo.String(\"123456\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/upsert"]["put"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "upsertLink"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.Upsert(ctx, &operations.UpsertLinkRequestBody{\n        URL: \"https://google.com\",\n        ExternalID: dubgo.String(\"123456\"),\n        TagIds: dubgo.Pointer(operations.CreateUpsertLinkTagIdsArrayOfStr(\n            []string{\n                \"clux0rgak00011...\",\n            },\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/{linkId}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteLink"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.Delete(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/links/{linkId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateLink"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Links.Update(ctx, \"<id>\", &operations.UpdateLinkRequestBody{\n        URL: dubgo.String(\"https://google.com\"),\n        ExternalID: dubgo.String(\"123456\"),\n        TagIds: dubgo.Pointer(operations.CreateUpdateLinkTagIdsArrayOfStr(\n            []string{\n                \"clux0rgak00011...\",\n            },\n        )),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/metatags"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getMetatags"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Metatags.Get(ctx, operations.GetMetatagsRequest{\n        URL: \"https://dub.co\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/partners"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createPartner"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Partners.Create(ctx, &operations.CreatePartnerRequestBody{\n        ProgramID: \"<id>\",\n        Name: \"<value>\",\n        Email: \"Loyal79@yahoo.com\",\n        Username: \"Aaliyah_Borer\",\n        LinkProps: &operations.LinkProps{\n            ExternalID: dubgo.String(\"123456\"),\n            TagIds: dubgo.Pointer(operations.CreateCreatePartnerTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n            )),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/qr"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getQRCode"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.QRCodes.Get(ctx, operations.GetQRCodeRequest{\n        URL: \"https://normal-making.name\",\n        Size: dubgo.Float64(600),\n        Level: operations.LevelL.ToPointer(),\n        FgColor: dubgo.String(\"#000000\"),\n        BgColor: dubgo.String(\"#FFFFFF\"),\n        HideLogo: dubgo.Bool(true),\n        Margin: dubgo.Float64(2),\n        IncludeMargin: dubgo.Bool(true),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/tags"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getTags"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Tags.List(ctx, operations.GetTagsRequest{\n        SortBy: operations.GetTagsQueryParamSortByName.ToPointer(),\n        SortOrder: operations.GetTagsQueryParamSortOrderAsc.ToPointer(),\n        Page: dubgo.Float64(1),\n        PageSize: dubgo.Float64(50),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/tags"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createTag"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Tags.Create(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/tags/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteTag"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Tags.Delete(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/tags/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateTag"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Tags.Update(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/tokens/embed"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createEmbedToken"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.EmbedTokens.Create(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/track/lead"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "trackLead"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Track.Lead(ctx, &operations.TrackLeadRequestBody{\n        ClickID: \"<id>\",\n        EventName: \"Sign up\",\n        ExternalID: dubgo.String(\"\"),\n        CustomerID: nil,\n        CustomerName: nil,\n        CustomerEmail: nil,\n        CustomerAvatar: nil,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/track/sale"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "trackSale"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Track.Sale(ctx, &operations.TrackSaleRequestBody{\n        ExternalID: dubgo.String(\"\"),\n        CustomerID: nil,\n        Amount: 996500,\n        PaymentProcessor: operations.PaymentProcessorPaddle,\n        EventName: dubgo.String(\"Purchase\"),\n        InvoiceID: nil,\n        Currency: dubgo.String(\"usd\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/workspaces/{idOrSlug}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getWorkspace"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Workspaces.Get(ctx, operations.GetWorkspaceRequest{\n        IDOrSlug: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/workspaces/{idOrSlug}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateWorkspace"
          "source": "package main\n\nimport(\n\t\"context\"\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    res, err := s.Workspaces.Update(ctx, \"<value>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
